{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Viper Boot User Guide \u00a4 Overview \u00a4 Viper Boot makes it easy to create stand-alone, production-grade Python based Applications and APIs that you can \"just run\". Design with gang of four pattern and 12 factor methodology with object oriented programming paradigm. Features \u00a4 Create stand-alone Python applications and APIs Embed virtual environment (no need to install seperately) Embed packaging and dependency managment Built-in PEP 8 style guide support Built-in conventional commit specification support Embed CLI programming toolkit Built-in testing and mocking toolkit Embed auto code reference documents generation and deployment Embed OpenAPI specification, previously known as the Swagger specification documents generation Embed package generation support for PyPI and Serverless Requirements \u00a4 Requires Python 3.7 or above. Git Poetry Package Manager Usage \u00a4 Please see the Usage for details. License \u00a4 This project is under the terms of the license . Specifications, patterns, tools and frameworks used \u00a4 Object-Oriented Programming Paradigm PEP 8 \u2013 Style Guide for Python Code 12 Factor Methodology Gang of Four Design Pattern AWS Lambda Architecture Poetry-Package Manager Pre-commit-Hooks Click-CLI Toolkit Conventional Commits Specification MkDocs-Code Reference Documentation pytest-Code Testing Toolkit OpenApi Specification-API Documentation","title":"Overview"},{"location":"index.html#viper-boot-user-guide","text":"","title":"Viper Boot User Guide"},{"location":"index.html#overview","text":"Viper Boot makes it easy to create stand-alone, production-grade Python based Applications and APIs that you can \"just run\". Design with gang of four pattern and 12 factor methodology with object oriented programming paradigm.","title":"Overview"},{"location":"index.html#features","text":"Create stand-alone Python applications and APIs Embed virtual environment (no need to install seperately) Embed packaging and dependency managment Built-in PEP 8 style guide support Built-in conventional commit specification support Embed CLI programming toolkit Built-in testing and mocking toolkit Embed auto code reference documents generation and deployment Embed OpenAPI specification, previously known as the Swagger specification documents generation Embed package generation support for PyPI and Serverless","title":"Features"},{"location":"index.html#requirements","text":"Requires Python 3.7 or above. Git Poetry Package Manager","title":"Requirements"},{"location":"index.html#usage","text":"Please see the Usage for details.","title":"Usage"},{"location":"index.html#license","text":"This project is under the terms of the license .","title":"License"},{"location":"index.html#specifications-patterns-tools-and-frameworks-used","text":"Object-Oriented Programming Paradigm PEP 8 \u2013 Style Guide for Python Code 12 Factor Methodology Gang of Four Design Pattern AWS Lambda Architecture Poetry-Package Manager Pre-commit-Hooks Click-CLI Toolkit Conventional Commits Specification MkDocs-Code Reference Documentation pytest-Code Testing Toolkit OpenApi Specification-API Documentation","title":"Specifications, patterns, tools and frameworks used"},{"location":"changelog.html","text":"Changelog \u00a4","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"contribute.html","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little help, and credit will always be given. Environment setup \u00a4 Nothing easier! Requires Python 3.7 or above. Todo Recommend using pyenv . Install pyenv brew update brew install pyenv Set up your shell environment for Pyenv Bash Zsh echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc echo 'eval \"$(pyenv init -)\"' >> ~/.zshrc Tip Then, if you have ~/.profile , ~/.bash_profile or ~/.bash_login , add the commands there as well. Restart your shell exec \" $SHELL \" Install Python 3.7 pyenv install 3 .7:latest Make it available globally pyenv global 3 .7 Todo Install Poetry . Linux/macOS Windows curl -sSL https://install.python-poetry.org | python3 - ( Invoke-WebRequest -Uri https :// install . python-poetry . org -UseBasicParsing ). Content | py - Todo Install git Tip Recommend using SSH or access token Clone the git repository git clone <repository-url> Tasks (Sessions) \u00a4 This project uses nox to run tasks (Sessions). A noxfile.py contains all the tasks running under poetry virtual environment. To list all tasks available in noxfile.py nox --list Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit/write the code and/or the documentation edit/write tests Type Public Private Packages snake_case Modules snake_case _snake_case Classes PascalCase _PascalCase Exceptions PascalCase Functions snake_case() _snake_case() Global/Class Constants SNAKE_CASE_ALL_CAPS _SNAKE_CASE_ALL_CAPS Global/Class Variables snake_case _snake_case__snake_case Instance Variables snake_case _snake_case Method Names snake_case() _snake_case()__snake_case() Function/Method Parameters snake_case Local Variables snake_case Before committing \u00a4 Make sure build passes all standards, specifications,checks and tests. poetry shell poetry install nox Warning Recommend to use nox -s commit instead of git commit If you want to use git commit then strictly follow our commit message convention nox -s commit will automatically bump the version (if required), create version tag, update version files and update changelog file nox -s commit follow our commit message convention Update the changelog . Commit message convention \u00a4 Commit messages must follow the Conventional commits style Info <type>[(optional scope)]: <description> <BLANK LINE> [optional body] <BLANK LINE> [optional footer] Type can be: - build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Scope can be: - api : About api. lambda : About serverless lambda function. apigateway : About api gateway. loggroup : About log group. Description (and body) must be valid Markdown. Footer should contain Jira/Ticket reference number and/or Reviewer name Example fix: prevent racing of requests Introduce a request id and a reference to latest request. Dismiss incoming responses other than from latest request. Remove timeouts which were used to mitigate the racing issue but are obsolete now. Reviewed-by: John Smith Refs: #123, #456 Example docs: correct spelling of CHANGELOG Attention BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type. Example feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files OR Example feat(api)!: send an email to the customer when a product is shipped Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. Communicate reviewers/testers in Jira and Slack with Jira ticket and PR links If branch is deployed to sandbox environment, then provide link to access it. During review, recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash branch And push: git push","title":"Contribute"},{"location":"contribute.html#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little help, and credit will always be given.","title":"Contributing"},{"location":"contribute.html#environment-setup","text":"Nothing easier! Requires Python 3.7 or above. Todo Recommend using pyenv . Install pyenv brew update brew install pyenv Set up your shell environment for Pyenv Bash Zsh echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc echo 'eval \"$(pyenv init -)\"' >> ~/.zshrc Tip Then, if you have ~/.profile , ~/.bash_profile or ~/.bash_login , add the commands there as well. Restart your shell exec \" $SHELL \" Install Python 3.7 pyenv install 3 .7:latest Make it available globally pyenv global 3 .7 Todo Install Poetry . Linux/macOS Windows curl -sSL https://install.python-poetry.org | python3 - ( Invoke-WebRequest -Uri https :// install . python-poetry . org -UseBasicParsing ). Content | py - Todo Install git Tip Recommend using SSH or access token Clone the git repository git clone <repository-url>","title":"Environment setup"},{"location":"contribute.html#tasks-sessions","text":"This project uses nox to run tasks (Sessions). A noxfile.py contains all the tasks running under poetry virtual environment. To list all tasks available in noxfile.py nox --list","title":"Tasks (Sessions)"},{"location":"contribute.html#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit/write the code and/or the documentation edit/write tests Type Public Private Packages snake_case Modules snake_case _snake_case Classes PascalCase _PascalCase Exceptions PascalCase Functions snake_case() _snake_case() Global/Class Constants SNAKE_CASE_ALL_CAPS _SNAKE_CASE_ALL_CAPS Global/Class Variables snake_case _snake_case__snake_case Instance Variables snake_case _snake_case Method Names snake_case() _snake_case()__snake_case() Function/Method Parameters snake_case Local Variables snake_case","title":"Development"},{"location":"contribute.html#before-committing","text":"Make sure build passes all standards, specifications,checks and tests. poetry shell poetry install nox Warning Recommend to use nox -s commit instead of git commit If you want to use git commit then strictly follow our commit message convention nox -s commit will automatically bump the version (if required), create version tag, update version files and update changelog file nox -s commit follow our commit message convention Update the changelog .","title":"Before committing"},{"location":"contribute.html#commit-message-convention","text":"Commit messages must follow the Conventional commits style Info <type>[(optional scope)]: <description> <BLANK LINE> [optional body] <BLANK LINE> [optional footer] Type can be: - build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Scope can be: - api : About api. lambda : About serverless lambda function. apigateway : About api gateway. loggroup : About log group. Description (and body) must be valid Markdown. Footer should contain Jira/Ticket reference number and/or Reviewer name Example fix: prevent racing of requests Introduce a request id and a reference to latest request. Dismiss incoming responses other than from latest request. Remove timeouts which were used to mitigate the racing issue but are obsolete now. Reviewed-by: John Smith Refs: #123, #456 Example docs: correct spelling of CHANGELOG Attention BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type. Example feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files OR Example feat(api)!: send an email to the customer when a product is shipped","title":"Commit message convention"},{"location":"contribute.html#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. Communicate reviewers/testers in Jira and Slack with Jira ticket and PR links If branch is deployed to sandbox environment, then provide link to access it. During review, recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash branch And push: git push","title":"Pull requests guidelines"},{"location":"license.html","text":"Copyright (c) 2022, Semicolon Australia Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"usage.html","text":"Package / Application \u00a4 Environment setup \u00a4 Hint To know how to setup environment please click here . Then install the project and dependencies: poetry install Then update the project and dependencies: poetry update Activate the virtual environment created automatically by Poetry: poetry shell Quick start \u00a4 nox References \u00a4 Task / Session Description poetry install Install the package and its dependencies poetry update Update the package and its dependencies poetry shell Activate the virtual environment of Poetry exit Deactivate the virtual environment of Poetry nox Run all tasks (sessions) nox -s clean Clean package directory nox -s initialise Refresh virtual environment nox -s start Start the application (API) nox -s pre-commit Pre commit hooks for Python package nox -s flake8 Validate Python style guide across the package nox -s flake8-diff Validate Python style guide only for files changed nox -s pylint Lint Python code across the package nox -s pylint-diff Lint Python code only for files changed nox -s mypy Validate Python types nox -s pytest Run tests nox -s coverage Collect test coverage data and generate text report nox -s coverage-html-report Generate HTML report for test coverage nox -s coverage-lcov-report Generate LCOV report for test coverage nox -s xdoctest Run examples with tests written inside code documents nox -s safety Scan packages for vulnerabilities nox -s safety-report Generate packages vulnerabilities report in json format nox -s bandit Scan code for vulnerabilities nox -s mkdocs-build Generate code reference documents nox -s mkdocs-serve Serve / Open generated code reference documents nox -s mkdocs_deploy Deploy generated code reference documents to git hub nox -s pip-licenses Generate licenses for package nox -s build-serverless-package Build serverless package Tip If you want to run specific tasks only: nox -s prettier clean initialise start Troubleshoot \u00a4 If virtual environment already activated source \" $( poetry env list --full-path | grep Activated | cut -d ' ' -f1 ) /bin/activate\" To import and export dependencies Import (requirements.txt -> pyproject.toml) Export (pyproject.toml -> requirements.txt) cat requirements.txt | grep -v '#' | xargs poetry add poetry export --output requirements.txt To add development dependency poetry add pytest@latest --dev To remove anything that\u2019s not necessary. poetry install --sync If you can't able to run pre-commit hooks. chmod ug+x .git/hooks/* Poetry command reference \u00a4 Poetry Command Explanation $ poetry --version Show the version of your Poetry installation. $ poetry new Create a new Poetry project. $ poetry init Add Poetry to an existing project. $ poetry run Execute the given command with Poetry. $ poetry add Add a package to pyproject.toml and install it. $ poetry update Update your project\u2019s dependencies. $ poetry install Install the dependencies. $ poetry show List installed packages. $ poetry lock Pin the latest version of your dependencies into poetry.lock. $ poetry lock --no-update Refresh the poetry.lock file without updating any dependency version. $ poetry check Validate pyproject.toml. $ poetry config --list Show the Poetry configuration. $ poetry env list List the virtual environments of your project. $ poetry export Export poetry.lock to other formats. To learn more about poetry click here .","title":"Package"},{"location":"usage.html#package-application","text":"","title":"Package / Application"},{"location":"usage.html#environment-setup","text":"Hint To know how to setup environment please click here . Then install the project and dependencies: poetry install Then update the project and dependencies: poetry update Activate the virtual environment created automatically by Poetry: poetry shell","title":"Environment setup"},{"location":"usage.html#quick-start","text":"nox","title":"Quick start"},{"location":"usage.html#references","text":"Task / Session Description poetry install Install the package and its dependencies poetry update Update the package and its dependencies poetry shell Activate the virtual environment of Poetry exit Deactivate the virtual environment of Poetry nox Run all tasks (sessions) nox -s clean Clean package directory nox -s initialise Refresh virtual environment nox -s start Start the application (API) nox -s pre-commit Pre commit hooks for Python package nox -s flake8 Validate Python style guide across the package nox -s flake8-diff Validate Python style guide only for files changed nox -s pylint Lint Python code across the package nox -s pylint-diff Lint Python code only for files changed nox -s mypy Validate Python types nox -s pytest Run tests nox -s coverage Collect test coverage data and generate text report nox -s coverage-html-report Generate HTML report for test coverage nox -s coverage-lcov-report Generate LCOV report for test coverage nox -s xdoctest Run examples with tests written inside code documents nox -s safety Scan packages for vulnerabilities nox -s safety-report Generate packages vulnerabilities report in json format nox -s bandit Scan code for vulnerabilities nox -s mkdocs-build Generate code reference documents nox -s mkdocs-serve Serve / Open generated code reference documents nox -s mkdocs_deploy Deploy generated code reference documents to git hub nox -s pip-licenses Generate licenses for package nox -s build-serverless-package Build serverless package Tip If you want to run specific tasks only: nox -s prettier clean initialise start","title":"References"},{"location":"usage.html#troubleshoot","text":"If virtual environment already activated source \" $( poetry env list --full-path | grep Activated | cut -d ' ' -f1 ) /bin/activate\" To import and export dependencies Import (requirements.txt -> pyproject.toml) Export (pyproject.toml -> requirements.txt) cat requirements.txt | grep -v '#' | xargs poetry add poetry export --output requirements.txt To add development dependency poetry add pytest@latest --dev To remove anything that\u2019s not necessary. poetry install --sync If you can't able to run pre-commit hooks. chmod ug+x .git/hooks/*","title":"Troubleshoot"},{"location":"usage.html#poetry-command-reference","text":"Poetry Command Explanation $ poetry --version Show the version of your Poetry installation. $ poetry new Create a new Poetry project. $ poetry init Add Poetry to an existing project. $ poetry run Execute the given command with Poetry. $ poetry add Add a package to pyproject.toml and install it. $ poetry update Update your project\u2019s dependencies. $ poetry install Install the dependencies. $ poetry show List installed packages. $ poetry lock Pin the latest version of your dependencies into poetry.lock. $ poetry lock --no-update Refresh the poetry.lock file without updating any dependency version. $ poetry check Validate pyproject.toml. $ poetry config --list Show the Poetry configuration. $ poetry env list List the virtual environments of your project. $ poetry export Export poetry.lock to other formats. To learn more about poetry click here .","title":"Poetry command reference"},{"location":"xdoctest.html","text":"Xdoctest \u00a4 Usage \u00a4 def add_number ( operand_one : int , operand_two : int ) -> int : \"\"\" Accept two integer values and sum them up and return the sum. Example: >>> add_number(5 + 5) # xdoctest: +SKIP 10 >>> add_number(1 + 1) # xdoctest: +SKIP 2 >>> add_number(-1 + 2) # xdoctest: +SKIP InvalidIntegerError Parameters: operand_one (int): first number operand_two (int): second number Raises: InvalidIntegerError: If operand_one or operand_two is less than 0. Returns: Sum of two numbers \"\"\" if operand_one < 0 or operand_two < 0 : raise InvalidIntegerError ( f \"\"\"operand_one or operand_two is less than zero: operand_one= { operand_one } , operand_two= { operand_two } \"\"\" ) add : int = operand_one + operand_two return add Note 3 tests are writted in docstring which will be executed by xdoctest Example : >>> add_number ( 5 + 5 ) # xdoctest: +SKIP 10 >>> add_number ( 1 + 1 ) # xdoctest: +SKIP 2 >>> add_number ( - 1 + 2 ) # xdoctest: +SKIP InvalidIntegerError >>> add_number ( 5 + 5 ) # xdoctest: +SKIP 10 # (1) This assertion will be True Please see the readthedocs for details.","title":"xdoctest"},{"location":"xdoctest.html#xdoctest","text":"","title":"Xdoctest"},{"location":"xdoctest.html#usage","text":"def add_number ( operand_one : int , operand_two : int ) -> int : \"\"\" Accept two integer values and sum them up and return the sum. Example: >>> add_number(5 + 5) # xdoctest: +SKIP 10 >>> add_number(1 + 1) # xdoctest: +SKIP 2 >>> add_number(-1 + 2) # xdoctest: +SKIP InvalidIntegerError Parameters: operand_one (int): first number operand_two (int): second number Raises: InvalidIntegerError: If operand_one or operand_two is less than 0. Returns: Sum of two numbers \"\"\" if operand_one < 0 or operand_two < 0 : raise InvalidIntegerError ( f \"\"\"operand_one or operand_two is less than zero: operand_one= { operand_one } , operand_two= { operand_two } \"\"\" ) add : int = operand_one + operand_two return add Note 3 tests are writted in docstring which will be executed by xdoctest Example : >>> add_number ( 5 + 5 ) # xdoctest: +SKIP 10 >>> add_number ( 1 + 1 ) # xdoctest: +SKIP 2 >>> add_number ( - 1 + 2 ) # xdoctest: +SKIP InvalidIntegerError >>> add_number ( 5 + 5 ) # xdoctest: +SKIP 10 # (1) This assertion will be True Please see the readthedocs for details.","title":"Usage"},{"location":"reference/SUMMARY.html","text":"viper_boot config config controllers student_controller enums gender_enum examples object_oriented python models student_model openapi_docs decorators openapi request response open_api security_scheme utils schemas person_schema student_id_schema student_params_schema student_schema services student_service utils banner decorators singleton_decorator","title":"SUMMARY"},{"location":"reference/viper_boot/__init__.html","text":"Main Package.","title":"  init  "},{"location":"reference/viper_boot/config/__init__.html","text":"Config Package.","title":"  init  "},{"location":"reference/viper_boot/config/config.html","text":"Application Config Module. Config \u00a4 Application settings. Source code in viper_boot\\config\\config.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @singleton class Config : \"\"\"Application settings.\"\"\" _CONFIG_PATH = ( Path () . absolute () . joinpath ( \"src/viper_boot/config\" ) ) _environment : str def __init__ ( self , env : str = \"development\" ) -> None : \"\"\" Look into environment files and return settings based of env. Parameters: env (str): Environment @see https://dynaconf.readthedocs.io/en/docs_223/guides/advanced_usage.html # noqa \"\"\" self . _environment = env # Create `settings` instance # More options on https://www.dynaconf.com/configuration/ self . settings = Dynaconf ( settings_files = [ # Paths or globs to any toml|yaml|ini|json|py f \" { self . _CONFIG_PATH } /settings.toml\" , # Default settings # noqa f \" { self . _CONFIG_PATH } /settings_dev.toml\" , # Dev settings f \" { self . _CONFIG_PATH } /settings_prd.toml\" , # Prd settings f \" { self . _CONFIG_PATH } /.secrets.toml\" # Sensitive data (gitignored) # noqa ], environments = True , # Enable layered environments # (sections on config file for development, production, testing) load_dotenv = True , # Load envvars from a file named `.env` # TIP: probably you don't want to load dotenv on production environments # noqa # pass `load_dotenv={\"when\": {\"env\": {\"is_in\": [\"development\"]}}} # noqa envvar_prefix = \"DYNACONF\" , # variables exported as `DYNACONF_FOO=bar` becomes `settings.FOO == \"bar\"` # noqa env_switcher = \"ENV\" , # to switch environments `export ENV=production` # noqa dotenv_path = \"configs/.env\" # custom path for .env file to be loaded # noqa ) # NOTE: On Dynaconf 4.0.0 all the above will be also possible as a pydantic schema :) # noqa @property def get ( self ) -> Any : \"\"\" Getter method for settings. Returns: Application settings \"\"\" return self . settings . from_env ( self . _environment ) . as_dict () @property def environment ( self ) -> Any : \"\"\" Getter method for environment. Returns: Application environment \"\"\" return self . _environment @environment . setter def environment ( self , value : str ) -> None : \"\"\" Setter method for environment. Parameters: value (str): value to set \"\"\" self . _environment = value __init__ ( env = 'development' ) \u00a4 Look into environment files and return settings based of env. Parameters: Name Type Description Default env str Environment 'development' @see https://dynaconf.readthedocs.io/en/docs_223/guides/advanced_usage.html # noqa Source code in viper_boot\\config\\config.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def __init__ ( self , env : str = \"development\" ) -> None : \"\"\" Look into environment files and return settings based of env. Parameters: env (str): Environment @see https://dynaconf.readthedocs.io/en/docs_223/guides/advanced_usage.html # noqa \"\"\" self . _environment = env # Create `settings` instance # More options on https://www.dynaconf.com/configuration/ self . settings = Dynaconf ( settings_files = [ # Paths or globs to any toml|yaml|ini|json|py f \" { self . _CONFIG_PATH } /settings.toml\" , # Default settings # noqa f \" { self . _CONFIG_PATH } /settings_dev.toml\" , # Dev settings f \" { self . _CONFIG_PATH } /settings_prd.toml\" , # Prd settings f \" { self . _CONFIG_PATH } /.secrets.toml\" # Sensitive data (gitignored) # noqa ], environments = True , # Enable layered environments # (sections on config file for development, production, testing) load_dotenv = True , # Load envvars from a file named `.env` # TIP: probably you don't want to load dotenv on production environments # noqa # pass `load_dotenv={\"when\": {\"env\": {\"is_in\": [\"development\"]}}} # noqa envvar_prefix = \"DYNACONF\" , # variables exported as `DYNACONF_FOO=bar` becomes `settings.FOO == \"bar\"` # noqa env_switcher = \"ENV\" , # to switch environments `export ENV=production` # noqa dotenv_path = \"configs/.env\" # custom path for .env file to be loaded # noqa ) environment () property writable \u00a4 Getter method for environment. Returns: Type Description Any Application environment Source code in viper_boot\\config\\config.py 70 71 72 73 74 75 76 77 78 @property def environment ( self ) -> Any : \"\"\" Getter method for environment. Returns: Application environment \"\"\" return self . _environment get () property \u00a4 Getter method for settings. Returns: Type Description Any Application settings Source code in viper_boot\\config\\config.py 60 61 62 63 64 65 66 67 68 @property def get ( self ) -> Any : \"\"\" Getter method for settings. Returns: Application settings \"\"\" return self . settings . from_env ( self . _environment ) . as_dict ()","title":"config"},{"location":"reference/viper_boot/config/config.html#viper_boot.config.config.Config","text":"Application settings. Source code in viper_boot\\config\\config.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @singleton class Config : \"\"\"Application settings.\"\"\" _CONFIG_PATH = ( Path () . absolute () . joinpath ( \"src/viper_boot/config\" ) ) _environment : str def __init__ ( self , env : str = \"development\" ) -> None : \"\"\" Look into environment files and return settings based of env. Parameters: env (str): Environment @see https://dynaconf.readthedocs.io/en/docs_223/guides/advanced_usage.html # noqa \"\"\" self . _environment = env # Create `settings` instance # More options on https://www.dynaconf.com/configuration/ self . settings = Dynaconf ( settings_files = [ # Paths or globs to any toml|yaml|ini|json|py f \" { self . _CONFIG_PATH } /settings.toml\" , # Default settings # noqa f \" { self . _CONFIG_PATH } /settings_dev.toml\" , # Dev settings f \" { self . _CONFIG_PATH } /settings_prd.toml\" , # Prd settings f \" { self . _CONFIG_PATH } /.secrets.toml\" # Sensitive data (gitignored) # noqa ], environments = True , # Enable layered environments # (sections on config file for development, production, testing) load_dotenv = True , # Load envvars from a file named `.env` # TIP: probably you don't want to load dotenv on production environments # noqa # pass `load_dotenv={\"when\": {\"env\": {\"is_in\": [\"development\"]}}} # noqa envvar_prefix = \"DYNACONF\" , # variables exported as `DYNACONF_FOO=bar` becomes `settings.FOO == \"bar\"` # noqa env_switcher = \"ENV\" , # to switch environments `export ENV=production` # noqa dotenv_path = \"configs/.env\" # custom path for .env file to be loaded # noqa ) # NOTE: On Dynaconf 4.0.0 all the above will be also possible as a pydantic schema :) # noqa @property def get ( self ) -> Any : \"\"\" Getter method for settings. Returns: Application settings \"\"\" return self . settings . from_env ( self . _environment ) . as_dict () @property def environment ( self ) -> Any : \"\"\" Getter method for environment. Returns: Application environment \"\"\" return self . _environment @environment . setter def environment ( self , value : str ) -> None : \"\"\" Setter method for environment. Parameters: value (str): value to set \"\"\" self . _environment = value","title":"Config"},{"location":"reference/viper_boot/config/config.html#viper_boot.config.config.Config.__init__","text":"Look into environment files and return settings based of env. Parameters: Name Type Description Default env str Environment 'development' @see https://dynaconf.readthedocs.io/en/docs_223/guides/advanced_usage.html # noqa Source code in viper_boot\\config\\config.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def __init__ ( self , env : str = \"development\" ) -> None : \"\"\" Look into environment files and return settings based of env. Parameters: env (str): Environment @see https://dynaconf.readthedocs.io/en/docs_223/guides/advanced_usage.html # noqa \"\"\" self . _environment = env # Create `settings` instance # More options on https://www.dynaconf.com/configuration/ self . settings = Dynaconf ( settings_files = [ # Paths or globs to any toml|yaml|ini|json|py f \" { self . _CONFIG_PATH } /settings.toml\" , # Default settings # noqa f \" { self . _CONFIG_PATH } /settings_dev.toml\" , # Dev settings f \" { self . _CONFIG_PATH } /settings_prd.toml\" , # Prd settings f \" { self . _CONFIG_PATH } /.secrets.toml\" # Sensitive data (gitignored) # noqa ], environments = True , # Enable layered environments # (sections on config file for development, production, testing) load_dotenv = True , # Load envvars from a file named `.env` # TIP: probably you don't want to load dotenv on production environments # noqa # pass `load_dotenv={\"when\": {\"env\": {\"is_in\": [\"development\"]}}} # noqa envvar_prefix = \"DYNACONF\" , # variables exported as `DYNACONF_FOO=bar` becomes `settings.FOO == \"bar\"` # noqa env_switcher = \"ENV\" , # to switch environments `export ENV=production` # noqa dotenv_path = \"configs/.env\" # custom path for .env file to be loaded # noqa )","title":"__init__()"},{"location":"reference/viper_boot/config/config.html#viper_boot.config.config.Config.environment","text":"Getter method for environment. Returns: Type Description Any Application environment Source code in viper_boot\\config\\config.py 70 71 72 73 74 75 76 77 78 @property def environment ( self ) -> Any : \"\"\" Getter method for environment. Returns: Application environment \"\"\" return self . _environment","title":"environment()"},{"location":"reference/viper_boot/config/config.html#viper_boot.config.config.Config.get","text":"Getter method for settings. Returns: Type Description Any Application settings Source code in viper_boot\\config\\config.py 60 61 62 63 64 65 66 67 68 @property def get ( self ) -> Any : \"\"\" Getter method for settings. Returns: Application settings \"\"\" return self . settings . from_env ( self . _environment ) . as_dict ()","title":"get()"},{"location":"reference/viper_boot/controllers/__init__.html","text":"Controllers Package.","title":"  init  "},{"location":"reference/viper_boot/controllers/student_controller.html","text":"Student Controller. StudentController \u00a4 API controller for student. Source code in viper_boot\\controllers\\student_controller.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 class StudentController : \"\"\"API controller for student.\"\"\" def __init__ ( self ) -> None : \"\"\"Initialise the controller.\"\"\" self . _schemas = ( PersonSchema , StudentSchema , StudentIdSchema , StudentParamsSchema , ) @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str) : student id Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . get ( _id )) @staticmethod def get_all () -> Any : \"\"\" Endpoint handler for get API, returns all students. Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema ( many = True ) . dump ( StudentService . get_all ()) @staticmethod def post ( request : PersonSchema ) -> Any : \"\"\" Endpoint handler for post API, create student. Parameters: request (PersonSchema) : student request object Returns: (StudentIdSchema): API response \"\"\" # Serializing Object return StudentService . post ( PersonSchema () . dump ( request )) @staticmethod def patch ( _id : str , request : PersonSchema ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str): student id request (PersonSchema): student object Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . patch ( _id , request )) @staticmethod def delete ( _id : str = None ) -> Any : \"\"\" Endpoint handler for delete API, returns exception if fail. Parameters: _id (str) : student id Returns: Error if fail \"\"\" return StudentService . delete ( _id ) @property def schemas ( self ) -> Any : \"\"\" Getter for response schemas of API. Returns: response schemas \"\"\" return self . _schemas __init__ () \u00a4 Initialise the controller. Source code in viper_boot\\controllers\\student_controller.py 14 15 16 17 18 19 20 21 def __init__ ( self ) -> None : \"\"\"Initialise the controller.\"\"\" self . _schemas = ( PersonSchema , StudentSchema , StudentIdSchema , StudentParamsSchema , ) delete ( _id = None ) staticmethod \u00a4 Endpoint handler for delete API, returns exception if fail. Parameters: Name Type Description Default _id str) student id None Returns: Type Description Any Error if fail Source code in viper_boot\\controllers\\student_controller.py 77 78 79 80 81 82 83 84 85 86 87 88 @staticmethod def delete ( _id : str = None ) -> Any : \"\"\" Endpoint handler for delete API, returns exception if fail. Parameters: _id (str) : student id Returns: Error if fail \"\"\" return StudentService . delete ( _id ) get ( _id = None ) staticmethod \u00a4 Endpoint handler for get API, returns all students. Parameters: Name Type Description Default _id str) student id None Returns: Type Description StudentSchema API response Source code in viper_boot\\controllers\\student_controller.py 23 24 25 26 27 28 29 30 31 32 33 34 35 @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str) : student id Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . get ( _id )) get_all () staticmethod \u00a4 Endpoint handler for get API, returns all students. Returns: Type Description StudentSchema API response Source code in viper_boot\\controllers\\student_controller.py 37 38 39 40 41 42 43 44 45 46 @staticmethod def get_all () -> Any : \"\"\" Endpoint handler for get API, returns all students. Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema ( many = True ) . dump ( StudentService . get_all ()) patch ( _id , request ) staticmethod \u00a4 Endpoint handler for get API, returns all students. Parameters: Name Type Description Default _id str student id required request PersonSchema student object required Returns: Type Description StudentSchema API response Source code in viper_boot\\controllers\\student_controller.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @staticmethod def patch ( _id : str , request : PersonSchema ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str): student id request (PersonSchema): student object Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . patch ( _id , request )) post ( request ) staticmethod \u00a4 Endpoint handler for post API, create student. Parameters: Name Type Description Default request PersonSchema) student request object required Returns: Type Description StudentIdSchema API response Source code in viper_boot\\controllers\\student_controller.py 48 49 50 51 52 53 54 55 56 57 58 59 60 @staticmethod def post ( request : PersonSchema ) -> Any : \"\"\" Endpoint handler for post API, create student. Parameters: request (PersonSchema) : student request object Returns: (StudentIdSchema): API response \"\"\" # Serializing Object return StudentService . post ( PersonSchema () . dump ( request )) schemas () property \u00a4 Getter for response schemas of API. Returns: Type Description Any response schemas Source code in viper_boot\\controllers\\student_controller.py 90 91 92 93 94 95 96 97 98 @property def schemas ( self ) -> Any : \"\"\" Getter for response schemas of API. Returns: response schemas \"\"\" return self . _schemas","title":"student_controller"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController","text":"API controller for student. Source code in viper_boot\\controllers\\student_controller.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 class StudentController : \"\"\"API controller for student.\"\"\" def __init__ ( self ) -> None : \"\"\"Initialise the controller.\"\"\" self . _schemas = ( PersonSchema , StudentSchema , StudentIdSchema , StudentParamsSchema , ) @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str) : student id Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . get ( _id )) @staticmethod def get_all () -> Any : \"\"\" Endpoint handler for get API, returns all students. Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema ( many = True ) . dump ( StudentService . get_all ()) @staticmethod def post ( request : PersonSchema ) -> Any : \"\"\" Endpoint handler for post API, create student. Parameters: request (PersonSchema) : student request object Returns: (StudentIdSchema): API response \"\"\" # Serializing Object return StudentService . post ( PersonSchema () . dump ( request )) @staticmethod def patch ( _id : str , request : PersonSchema ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str): student id request (PersonSchema): student object Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . patch ( _id , request )) @staticmethod def delete ( _id : str = None ) -> Any : \"\"\" Endpoint handler for delete API, returns exception if fail. Parameters: _id (str) : student id Returns: Error if fail \"\"\" return StudentService . delete ( _id ) @property def schemas ( self ) -> Any : \"\"\" Getter for response schemas of API. Returns: response schemas \"\"\" return self . _schemas","title":"StudentController"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController.__init__","text":"Initialise the controller. Source code in viper_boot\\controllers\\student_controller.py 14 15 16 17 18 19 20 21 def __init__ ( self ) -> None : \"\"\"Initialise the controller.\"\"\" self . _schemas = ( PersonSchema , StudentSchema , StudentIdSchema , StudentParamsSchema , )","title":"__init__()"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController.delete","text":"Endpoint handler for delete API, returns exception if fail. Parameters: Name Type Description Default _id str) student id None Returns: Type Description Any Error if fail Source code in viper_boot\\controllers\\student_controller.py 77 78 79 80 81 82 83 84 85 86 87 88 @staticmethod def delete ( _id : str = None ) -> Any : \"\"\" Endpoint handler for delete API, returns exception if fail. Parameters: _id (str) : student id Returns: Error if fail \"\"\" return StudentService . delete ( _id )","title":"delete()"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController.get","text":"Endpoint handler for get API, returns all students. Parameters: Name Type Description Default _id str) student id None Returns: Type Description StudentSchema API response Source code in viper_boot\\controllers\\student_controller.py 23 24 25 26 27 28 29 30 31 32 33 34 35 @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str) : student id Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . get ( _id ))","title":"get()"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController.get_all","text":"Endpoint handler for get API, returns all students. Returns: Type Description StudentSchema API response Source code in viper_boot\\controllers\\student_controller.py 37 38 39 40 41 42 43 44 45 46 @staticmethod def get_all () -> Any : \"\"\" Endpoint handler for get API, returns all students. Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema ( many = True ) . dump ( StudentService . get_all ())","title":"get_all()"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController.patch","text":"Endpoint handler for get API, returns all students. Parameters: Name Type Description Default _id str student id required request PersonSchema student object required Returns: Type Description StudentSchema API response Source code in viper_boot\\controllers\\student_controller.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @staticmethod def patch ( _id : str , request : PersonSchema ) -> Any : \"\"\" Endpoint handler for get API, returns all students. Parameters: _id (str): student id request (PersonSchema): student object Returns: (StudentSchema): API response \"\"\" # Serializing Object return StudentSchema () . dump ( StudentService . patch ( _id , request ))","title":"patch()"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController.post","text":"Endpoint handler for post API, create student. Parameters: Name Type Description Default request PersonSchema) student request object required Returns: Type Description StudentIdSchema API response Source code in viper_boot\\controllers\\student_controller.py 48 49 50 51 52 53 54 55 56 57 58 59 60 @staticmethod def post ( request : PersonSchema ) -> Any : \"\"\" Endpoint handler for post API, create student. Parameters: request (PersonSchema) : student request object Returns: (StudentIdSchema): API response \"\"\" # Serializing Object return StudentService . post ( PersonSchema () . dump ( request ))","title":"post()"},{"location":"reference/viper_boot/controllers/student_controller.html#viper_boot.controllers.student_controller.StudentController.schemas","text":"Getter for response schemas of API. Returns: Type Description Any response schemas Source code in viper_boot\\controllers\\student_controller.py 90 91 92 93 94 95 96 97 98 @property def schemas ( self ) -> Any : \"\"\" Getter for response schemas of API. Returns: response schemas \"\"\" return self . _schemas","title":"schemas()"},{"location":"reference/viper_boot/enums/__init__.html","text":"Enums Package.","title":"  init  "},{"location":"reference/viper_boot/enums/gender_enum.html","text":"Gender Enum. GenderEnum \u00a4 Bases: Enum Valid names for Gender. Source code in viper_boot\\enums\\gender_enum.py 5 6 7 8 9 10 11 class GenderEnum ( Enum ): \"\"\"Valid names for Gender.\"\"\" MALE = \"male\" \"\"\"Valid name for Male gender\"\"\" FEMALE = \"female\" \"\"\"Valid name for Female gender\"\"\" FEMALE = 'female' class-attribute \u00a4 Valid name for Female gender MALE = 'male' class-attribute \u00a4 Valid name for Male gender","title":"gender_enum"},{"location":"reference/viper_boot/enums/gender_enum.html#viper_boot.enums.gender_enum.GenderEnum","text":"Bases: Enum Valid names for Gender. Source code in viper_boot\\enums\\gender_enum.py 5 6 7 8 9 10 11 class GenderEnum ( Enum ): \"\"\"Valid names for Gender.\"\"\" MALE = \"male\" \"\"\"Valid name for Male gender\"\"\" FEMALE = \"female\" \"\"\"Valid name for Female gender\"\"\"","title":"GenderEnum"},{"location":"reference/viper_boot/enums/gender_enum.html#viper_boot.enums.gender_enum.GenderEnum.FEMALE","text":"Valid name for Female gender","title":"FEMALE"},{"location":"reference/viper_boot/enums/gender_enum.html#viper_boot.enums.gender_enum.GenderEnum.MALE","text":"Valid name for Male gender","title":"MALE"},{"location":"reference/viper_boot/examples/__init__.html","text":"Example Package.","title":"  init  "},{"location":"reference/viper_boot/examples/object_oriented.html","text":"Object-Oriented Python. BaseClass \u00a4 A Base Class to demonstrate object-oriented implementation in Python. Source code in viper_boot\\examples\\object_oriented.pyclass BaseClass : \"\"\"A Base Class to demonstrate object-oriented implementation in Python.\"\"\" # Class properties property_one : int # Class constructor with method overloading def __init__ ( self , attribute_one : int = 0 , attribute_two : int = 0 , attribute_three : int = 0 , ) -> None : \"\"\" Set class properties to default values. Parameters: attribute_one (int): attribute one attribute_two (int): attribute two attribute_three (int): attribute three \"\"\" self . attribute_one = attribute_one or 2016 self . attribute_two = attribute_two or 20 self . attribute_three = attribute_three or 100 BaseClass . property_one += 1 # pylint: disable=no-member # Instance takes self as the first argument. # They are also called Object or regular method. # # Instance method (Public) def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 20. Returns: BaseClass.attribute_three + 20 \"\"\" return self . __sum ( self . attribute_three , 20 ) # Instance method (Public) def instance_method_two ( self ) -> int : \"\"\" Decrease the attribute_three by 50. Returns: BaseClass.attribute_three - 50 \"\"\" return self . __subtract ( self . attribute_three , 50 ) # Instance method (Private) @staticmethod def __sum ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Add two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one + operand_two \"\"\" return operand_one + operand_two # Instance method (Private) @staticmethod def __subtract ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Subtract two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one - operand_two \"\"\" return operand_one - operand_two # Class takes cls as the first argument. cls refers to class. # To access a class variable within a method, # we use the @classmethod decorator, and pass the class to the method # # Class method (Public) @classmethod def class_method ( cls ) -> int : \"\"\" Get total number of property_one. Returns: cls.property_one \"\"\" return cls . property_one # pylint: disable=no-member # Class method (Public) @classmethod def print_docstring ( cls ) -> None : \"\"\" Print docstring of the class. We can also use the help() function to read the docstrings associated with various objects. Example: help(ClassName) \"\"\" print ( cls . __doc__ ) # Static doesn\"t take anything as the first argument. # It has a limited use because # Neither you can access to the properties of an instance (object) of a # class NOR you can access to the attributes of the class. # The only usage is it can be called without an object. # It is mainly useful for creating helper or # utility functions like validation # # Static method (Public) @staticmethod def static_method ( value : int ) -> bool : \"\"\" Check if there is a value. Parameters: value (int): number of instances Returns: value > 0 \"\"\" check : bool = value > 0 return check # String representation of Class instance # This method should be at the bottom of the class ideally def __str__ ( self ) -> str : \"\"\" __str__ is used to produce readable representation of the object. Without __str__ print(class_instance) __main__.BaseClass object at 0x0000019ECCCA05F8 With __str__ print(class_instance) Attribute 1: 0 Attribute 2: 0 Attribute 3: 0 Property 1: 0 Returns: class object string \"\"\" # pylint: disable=no-member return ( f \"Attribute 1: { self . attribute_one } \\n \" f \"Attribute 2: { self . attribute_two } \\n \" f \"Attribute 3: { self . attribute_three } \\n \" f \"Property 1: { self . property_one } \" ) __init__ ( attribute_one = 0 , attribute_two = 0 , attribute_three = 0 ) \u00a4 Set class properties to default values. Parameters: Name Type Description Default attribute_one int attribute one 0 attribute_two int attribute two 0 attribute_three int attribute three 0 Source code in viper_boot\\examples\\object_oriented.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def __init__ ( self , attribute_one : int = 0 , attribute_two : int = 0 , attribute_three : int = 0 , ) -> None : \"\"\" Set class properties to default values. Parameters: attribute_one (int): attribute one attribute_two (int): attribute two attribute_three (int): attribute three \"\"\" self . attribute_one = attribute_one or 2016 self . attribute_two = attribute_two or 20 self . attribute_three = attribute_three or 100 BaseClass . property_one += 1 # pylint: disable=no-member __str__ () \u00a4 str is used to produce readable representation of the object. Without str print(class_instance) main .BaseClass object at 0x0000019ECCCA05F8 With str print(class_instance) Attribute 1: 0 Attribute 2: 0 Attribute 3: 0 Property 1: 0 Returns: Type Description str class object string Source code in viper_boot\\examples\\object_oriented.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 def __str__ ( self ) -> str : \"\"\" __str__ is used to produce readable representation of the object. Without __str__ print(class_instance) __main__.BaseClass object at 0x0000019ECCCA05F8 With __str__ print(class_instance) Attribute 1: 0 Attribute 2: 0 Attribute 3: 0 Property 1: 0 Returns: class object string \"\"\" # pylint: disable=no-member return ( f \"Attribute 1: { self . attribute_one } \\n \" f \"Attribute 2: { self . attribute_two } \\n \" f \"Attribute 3: { self . attribute_three } \\n \" f \"Property 1: { self . property_one } \" ) __subtract ( operand_one , operand_two = 0 ) staticmethod \u00a4 Subtract two numbers. Parameters: Name Type Description Default operand_one int operand one required operand_two int operand two 0 Returns: Type Description int operand_one - operand_two Source code in viper_boot\\examples\\object_oriented.py 73 74 75 76 77 78 79 80 81 82 83 84 85 @staticmethod def __subtract ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Subtract two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one - operand_two \"\"\" return operand_one - operand_two __sum ( operand_one , operand_two = 0 ) staticmethod \u00a4 Add two numbers. Parameters: Name Type Description Default operand_one int operand one required operand_two int operand two 0 Returns: Type Description int operand_one + operand_two Source code in viper_boot\\examples\\object_oriented.py 58 59 60 61 62 63 64 65 66 67 68 69 70 @staticmethod def __sum ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Add two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one + operand_two \"\"\" return operand_one + operand_two class_method () classmethod \u00a4 Get total number of property_one. Returns: Type Description int cls.property_one Source code in viper_boot\\examples\\object_oriented.py 92 93 94 95 96 97 98 99 100 @classmethod def class_method ( cls ) -> int : \"\"\" Get total number of property_one. Returns: cls.property_one \"\"\" return cls . property_one # pylint: disable=no-member instance_method_one () \u00a4 Increase the attribute_three by 20. Returns: Type Description int BaseClass.attribute_three + 20 Source code in viper_boot\\examples\\object_oriented.py 38 39 40 41 42 43 44 45 def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 20. Returns: BaseClass.attribute_three + 20 \"\"\" return self . __sum ( self . attribute_three , 20 ) instance_method_two () \u00a4 Decrease the attribute_three by 50. Returns: Type Description int BaseClass.attribute_three - 50 Source code in viper_boot\\examples\\object_oriented.py 48 49 50 51 52 53 54 55 def instance_method_two ( self ) -> int : \"\"\" Decrease the attribute_three by 50. Returns: BaseClass.attribute_three - 50 \"\"\" return self . __subtract ( self . attribute_three , 50 ) print_docstring () classmethod \u00a4 Print docstring of the class. We can also use the help() function to read the docstrings associated with various objects. Example: help(ClassName) Source code in viper_boot\\examples\\object_oriented.py 103 104 105 106 107 108 109 110 111 112 113 114 @classmethod def print_docstring ( cls ) -> None : \"\"\" Print docstring of the class. We can also use the help() function to read the docstrings associated with various objects. Example: help(ClassName) \"\"\" print ( cls . __doc__ ) static_method ( value ) staticmethod \u00a4 Check if there is a value. Parameters: Name Type Description Default value int number of instances required Returns: Type Description bool value > 0 Source code in viper_boot\\examples\\object_oriented.py 125 126 127 128 129 130 131 132 133 134 135 136 137 @staticmethod def static_method ( value : int ) -> bool : \"\"\" Check if there is a value. Parameters: value (int): number of instances Returns: value > 0 \"\"\" check : bool = value > 0 return check DataEncapsulationClass \u00a4 Bases: BaseClass A Child Class to demonstrate Data Encapsulation. Encapsulation of Data means restricting access to methods and variables. This can prevent the data from being modified by accident (mistake). When we use two underscores \"__\" before attribute name, it makes attribute not accessible outside class. It becomes private attribute which means you can\"t read and write to those attributes except inside the class. When you don\"t use underscore before attribute, it is a public attribute which can be accessed inside or outside a class. Source code in viper_boot\\examples\\object_oriented.py 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 class DataEncapsulationClass ( BaseClass ): \"\"\" A Child Class to demonstrate Data Encapsulation. Encapsulation of Data means restricting access to methods and variables. This can prevent the data from being modified by accident (mistake). - When we use two underscores \"__\" before attribute name, it makes attribute not accessible outside class. It becomes private attribute which means you can\"t read and write to those attributes except inside the class. - When you don\"t use underscore before attribute, it is a public attribute which can be accessed inside or outside a class. \"\"\" # Class properties _private_property : str # Class constructor with method overloading def __init__ ( self , value : str = \"\" ) -> None : \"\"\" Set base class and self properties to default values. Parameters: value (str): __private_attribute argument \"\"\" # Execute base class constructor super () . __init__ () self . _private_attribute = value self . _private_property = value __init__ ( value = '' ) \u00a4 Set base class and self properties to default values. Parameters: Name Type Description Default value str __private_attribute argument '' Source code in viper_boot\\examples\\object_oriented.py 277 278 279 280 281 282 283 284 285 286 287 288 def __init__ ( self , value : str = \"\" ) -> None : \"\"\" Set base class and self properties to default values. Parameters: value (str): __private_attribute argument \"\"\" # Execute base class constructor super () . __init__ () self . _private_attribute = value self . _private_property = value ExceptionHandler \u00a4 Bases: RuntimeError Handle custom exception in the code base. Source code in viper_boot\\examples\\object_oriented.py 4 5 class ExceptionHandler ( RuntimeError ): \"\"\"Handle custom exception in the code base.\"\"\" GetterSetterDeleterClass \u00a4 Class to demonstrate Getter, Setter & Deleter. Source code in viper_boot\\examples\\object_oriented.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 class GetterSetterDeleterClass : \"\"\"Class to demonstrate Getter, Setter & Deleter.\"\"\" # Class properties _private_property : str # Class constructor with method overloading def __init__ ( self , attribute_one : str = \"\" , attribute_two : str = \"\" , attribute_three : str = \"\" , ) -> None : \"\"\" Set properties to default values. Parameters: attribute_one (str): attribute one attribute_two (str): attribute two attribute_three (str): attribute three \"\"\" self . _attribute_one = attribute_one self . _attribute_two = attribute_two self . _attribute_three = attribute_three # Getters, Setters & Deleter @property def attribute_one ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one @attribute_one . setter def attribute_one ( self , value : str ) -> None : \"\"\" Setter method for attribute. Parameters: value (str): value to set \"\"\" self . _attribute_one = value self . _private_property = self . _attribute_one + self . _attribute_two @attribute_one . deleter def attribute_one ( self ) -> None : \"\"\"Deleter method for attribute.\"\"\" # noqa del self . _attribute_one @property def attribute_two ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one @attribute_two . setter def attribute_two ( self , value : str ) -> None : \"\"\" Setter method for attribute. Parameters: value (str): value to set \"\"\" self . _attribute_two = value self . _private_property = self . _attribute_one + self . _attribute_two @attribute_two . deleter def attribute_two ( self ) -> None : \"\"\"Deleter method for attribute.\"\"\" # noqa del self . _attribute_two @property def attribute_three ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one @attribute_three . setter def attribute_three ( self , value : str ) -> None : \"\"\" Setter method for attribute. Parameters: value (str): value to set \"\"\" self . _attribute_three = value self . _private_property = self . _attribute_one + self . _attribute_two @attribute_three . deleter def attribute_three ( self ) -> None : \"\"\"Deleter method for attribute.\"\"\" # noqa del self . _attribute_three __init__ ( attribute_one = '' , attribute_two = '' , attribute_three = '' ) \u00a4 Set properties to default values. Parameters: Name Type Description Default attribute_one str attribute one '' attribute_two str attribute two '' attribute_three str attribute three '' Source code in viper_boot\\examples\\object_oriented.py 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 def __init__ ( self , attribute_one : str = \"\" , attribute_two : str = \"\" , attribute_three : str = \"\" , ) -> None : \"\"\" Set properties to default values. Parameters: attribute_one (str): attribute one attribute_two (str): attribute two attribute_three (str): attribute three \"\"\" self . _attribute_one = attribute_one self . _attribute_two = attribute_two self . _attribute_three = attribute_three attribute_one () deletable property writable \u00a4 Getter method for attribute. Returns: Type Description str attribute value Source code in viper_boot\\examples\\object_oriented.py 318 319 320 321 322 323 324 325 326 @property def attribute_one ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one attribute_three () deletable property writable \u00a4 Getter method for attribute. Returns: Type Description str attribute value Source code in viper_boot\\examples\\object_oriented.py 370 371 372 373 374 375 376 377 378 @property def attribute_three ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one attribute_two () deletable property writable \u00a4 Getter method for attribute. Returns: Type Description str attribute value Source code in viper_boot\\examples\\object_oriented.py 344 345 346 347 348 349 350 351 352 @property def attribute_two ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one InheritClassWithExtraAttribute \u00a4 Bases: BaseClass A Child Class inherits Base Class and add extra attribute. Source code in viper_boot\\examples\\object_oriented.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 class InheritClassWithExtraAttribute ( BaseClass ): \"\"\"A Child Class inherits Base Class and add extra attribute.\"\"\" # Class constructor with method overloading def __init__ ( self , extra_attribute : int = 0 ) -> None : \"\"\" Set base class and self properties to default values. Parameters: extra_attribute (int): extra attribute \"\"\" # Execute base class constructor super () . __init__ () self . extra_attribute = extra_attribute or 999 __init__ ( extra_attribute = 0 ) \u00a4 Set base class and self properties to default values. Parameters: Name Type Description Default extra_attribute int extra attribute 0 Source code in viper_boot\\examples\\object_oriented.py 179 180 181 182 183 184 185 186 187 188 189 def __init__ ( self , extra_attribute : int = 0 ) -> None : \"\"\" Set base class and self properties to default values. Parameters: extra_attribute (int): extra attribute \"\"\" # Execute base class constructor super () . __init__ () self . extra_attribute = extra_attribute or 999 InheritMultipleClasses \u00a4 Bases: InheritClassWithExtraAttribute , SimpleInheritClass A Child Class inherits multiple classes. Method Resolution Order (MRO) is the order in which methods should be inherited in the presence of multiple inheritance. You can view the MRO by using the mro attribute. Example: _class_instance. mro Source code in viper_boot\\examples\\object_oriented.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 class InheritMultipleClasses ( InheritClassWithExtraAttribute , SimpleInheritClass ): \"\"\" A Child Class inherits multiple classes. Method Resolution Order (MRO) is the order in which methods should be inherited in the presence of multiple inheritance. You can view the MRO by using the __mro__ attribute. Example: _class_instance.__mro__ \"\"\" # Class constructor def __init__ ( self ) -> None : \"\"\"Set base class and self properties to default values.\"\"\" # Execute base class constructor super () . __init__ () __init__ () \u00a4 Set base class and self properties to default values. Source code in viper_boot\\examples\\object_oriented.py 206 207 208 209 def __init__ ( self ) -> None : \"\"\"Set base class and self properties to default values.\"\"\" # Execute base class constructor super () . __init__ () PolymorphClass \u00a4 Bases: BaseClass A Child Class to demonstrate Method Overriding and Method Overloading. Polymorphism means the ability to take various forms. It is an important concept when you deal with child and parent class. Polymorphism in python is applied through method overriding and method overloading. Source code in viper_boot\\examples\\object_oriented.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 class PolymorphClass ( BaseClass ): \"\"\" A Child Class to demonstrate Method Overriding and Method Overloading. Polymorphism means the ability to take various forms. It is an important concept when you deal with child and parent class. Polymorphism in python is applied through method overriding and method overloading. \"\"\" # Class attributes _check : bool # Method overriding (Base class method) def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 50. Method overriding allows us to have a method in the child class with the same name as in the parent class but the definition of the child class method is different from parent class method. Returns: attribute_three + 50 \"\"\" return self . attribute_three + 50 # Method overloading def method_overload ( self , value : int = 0 ) -> bool : \"\"\" Check the value and return a boolean value. It allows you to define a function or method with flexibility so that you can call it with or without arguments. Parameters: value (int): value Returns: value > 0 \"\"\" self . _check = value > 0 return self . _check instance_method_one () \u00a4 Increase the attribute_three by 50. Method overriding allows us to have a method in the child class with the same name as in the parent class but the definition of the child class method is different from parent class method. Returns: Type Description int attribute_three + 50 Source code in viper_boot\\examples\\object_oriented.py 226 227 228 229 230 231 232 233 234 235 236 237 def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 50. Method overriding allows us to have a method in the child class with the same name as in the parent class but the definition of the child class method is different from parent class method. Returns: attribute_three + 50 \"\"\" return self . attribute_three + 50 method_overload ( value = 0 ) \u00a4 Check the value and return a boolean value. It allows you to define a function or method with flexibility so that you can call it with or without arguments. Parameters: Name Type Description Default value int value 0 Returns: Type Description bool value > 0 Source code in viper_boot\\examples\\object_oriented.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def method_overload ( self , value : int = 0 ) -> bool : \"\"\" Check the value and return a boolean value. It allows you to define a function or method with flexibility so that you can call it with or without arguments. Parameters: value (int): value Returns: value > 0 \"\"\" self . _check = value > 0 return self . _check SimpleInheritClass \u00a4 Bases: BaseClass A Simple Child Class inherits Base Class. Source code in viper_boot\\examples\\object_oriented.py 169 170 171 172 class SimpleInheritClass ( BaseClass ): \"\"\"A Simple Child Class inherits Base Class.\"\"\" pass # pylint: disable=unnecessary-pass SingletonClass \u00a4 A Class demonstrate singleton pattern. Inspired by Gang of Four and The Flyweight patterns Source code in viper_boot\\examples\\object_oriented.py 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 class SingletonClass : \"\"\" A Class demonstrate singleton pattern. Inspired by Gang of Four and The Flyweight patterns \"\"\" _instance = None # Singleton class constructor # Note: mypy does not (yet) support the special behavior of __new__() # using type: ignore def __new__ ( cls ): # type: ignore \"\"\" Singleton object demonstration. Returns: (Any): singleton object \"\"\" if cls . _instance is None : print ( \"Creating the object\" ) cls . _instance = super () . __new__ ( cls ) # Put any initialization here. return cls . _instance __new__ () \u00a4 Singleton object demonstration. Returns: Type Description Any singleton object Source code in viper_boot\\examples\\object_oriented.py 409 410 411 412 413 414 415 416 417 418 419 420 def __new__ ( cls ): # type: ignore \"\"\" Singleton object demonstration. Returns: (Any): singleton object \"\"\" if cls . _instance is None : print ( \"Creating the object\" ) cls . _instance = super () . __new__ ( cls ) # Put any initialization here. return cls . _instance","title":"object_oriented"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass","text":"A Base Class to demonstrate object-oriented implementation in Python. Source code in viper_boot\\examples\\object_oriented.pyclass BaseClass : \"\"\"A Base Class to demonstrate object-oriented implementation in Python.\"\"\" # Class properties property_one : int # Class constructor with method overloading def __init__ ( self , attribute_one : int = 0 , attribute_two : int = 0 , attribute_three : int = 0 , ) -> None : \"\"\" Set class properties to default values. Parameters: attribute_one (int): attribute one attribute_two (int): attribute two attribute_three (int): attribute three \"\"\" self . attribute_one = attribute_one or 2016 self . attribute_two = attribute_two or 20 self . attribute_three = attribute_three or 100 BaseClass . property_one += 1 # pylint: disable=no-member # Instance takes self as the first argument. # They are also called Object or regular method. # # Instance method (Public) def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 20. Returns: BaseClass.attribute_three + 20 \"\"\" return self . __sum ( self . attribute_three , 20 ) # Instance method (Public) def instance_method_two ( self ) -> int : \"\"\" Decrease the attribute_three by 50. Returns: BaseClass.attribute_three - 50 \"\"\" return self . __subtract ( self . attribute_three , 50 ) # Instance method (Private) @staticmethod def __sum ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Add two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one + operand_two \"\"\" return operand_one + operand_two # Instance method (Private) @staticmethod def __subtract ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Subtract two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one - operand_two \"\"\" return operand_one - operand_two # Class takes cls as the first argument. cls refers to class. # To access a class variable within a method, # we use the @classmethod decorator, and pass the class to the method # # Class method (Public) @classmethod def class_method ( cls ) -> int : \"\"\" Get total number of property_one. Returns: cls.property_one \"\"\" return cls . property_one # pylint: disable=no-member # Class method (Public) @classmethod def print_docstring ( cls ) -> None : \"\"\" Print docstring of the class. We can also use the help() function to read the docstrings associated with various objects. Example: help(ClassName) \"\"\" print ( cls . __doc__ ) # Static doesn\"t take anything as the first argument. # It has a limited use because # Neither you can access to the properties of an instance (object) of a # class NOR you can access to the attributes of the class. # The only usage is it can be called without an object. # It is mainly useful for creating helper or # utility functions like validation # # Static method (Public) @staticmethod def static_method ( value : int ) -> bool : \"\"\" Check if there is a value. Parameters: value (int): number of instances Returns: value > 0 \"\"\" check : bool = value > 0 return check # String representation of Class instance # This method should be at the bottom of the class ideally def __str__ ( self ) -> str : \"\"\" __str__ is used to produce readable representation of the object. Without __str__ print(class_instance) __main__.BaseClass object at 0x0000019ECCCA05F8 With __str__ print(class_instance) Attribute 1: 0 Attribute 2: 0 Attribute 3: 0 Property 1: 0 Returns: class object string \"\"\" # pylint: disable=no-member return ( f \"Attribute 1: { self . attribute_one } \\n \" f \"Attribute 2: { self . attribute_two } \\n \" f \"Attribute 3: { self . attribute_three } \\n \" f \"Property 1: { self . property_one } \" )","title":"BaseClass"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.__init__","text":"Set class properties to default values. Parameters: Name Type Description Default attribute_one int attribute one 0 attribute_two int attribute two 0 attribute_three int attribute three 0 Source code in viper_boot\\examples\\object_oriented.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def __init__ ( self , attribute_one : int = 0 , attribute_two : int = 0 , attribute_three : int = 0 , ) -> None : \"\"\" Set class properties to default values. Parameters: attribute_one (int): attribute one attribute_two (int): attribute two attribute_three (int): attribute three \"\"\" self . attribute_one = attribute_one or 2016 self . attribute_two = attribute_two or 20 self . attribute_three = attribute_three or 100 BaseClass . property_one += 1 # pylint: disable=no-member","title":"__init__()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.__str__","text":"str is used to produce readable representation of the object. Without str print(class_instance) main .BaseClass object at 0x0000019ECCCA05F8 With str print(class_instance) Attribute 1: 0 Attribute 2: 0 Attribute 3: 0 Property 1: 0 Returns: Type Description str class object string Source code in viper_boot\\examples\\object_oriented.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 def __str__ ( self ) -> str : \"\"\" __str__ is used to produce readable representation of the object. Without __str__ print(class_instance) __main__.BaseClass object at 0x0000019ECCCA05F8 With __str__ print(class_instance) Attribute 1: 0 Attribute 2: 0 Attribute 3: 0 Property 1: 0 Returns: class object string \"\"\" # pylint: disable=no-member return ( f \"Attribute 1: { self . attribute_one } \\n \" f \"Attribute 2: { self . attribute_two } \\n \" f \"Attribute 3: { self . attribute_three } \\n \" f \"Property 1: { self . property_one } \" )","title":"__str__()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.__subtract","text":"Subtract two numbers. Parameters: Name Type Description Default operand_one int operand one required operand_two int operand two 0 Returns: Type Description int operand_one - operand_two Source code in viper_boot\\examples\\object_oriented.py 73 74 75 76 77 78 79 80 81 82 83 84 85 @staticmethod def __subtract ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Subtract two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one - operand_two \"\"\" return operand_one - operand_two","title":"__subtract()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.__sum","text":"Add two numbers. Parameters: Name Type Description Default operand_one int operand one required operand_two int operand two 0 Returns: Type Description int operand_one + operand_two Source code in viper_boot\\examples\\object_oriented.py 58 59 60 61 62 63 64 65 66 67 68 69 70 @staticmethod def __sum ( operand_one : int , operand_two : int = 0 ) -> int : \"\"\" Add two numbers. Parameters: operand_one (int): operand one operand_two (int): operand two Returns: operand_one + operand_two \"\"\" return operand_one + operand_two","title":"__sum()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.class_method","text":"Get total number of property_one. Returns: Type Description int cls.property_one Source code in viper_boot\\examples\\object_oriented.py 92 93 94 95 96 97 98 99 100 @classmethod def class_method ( cls ) -> int : \"\"\" Get total number of property_one. Returns: cls.property_one \"\"\" return cls . property_one # pylint: disable=no-member","title":"class_method()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.instance_method_one","text":"Increase the attribute_three by 20. Returns: Type Description int BaseClass.attribute_three + 20 Source code in viper_boot\\examples\\object_oriented.py 38 39 40 41 42 43 44 45 def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 20. Returns: BaseClass.attribute_three + 20 \"\"\" return self . __sum ( self . attribute_three , 20 )","title":"instance_method_one()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.instance_method_two","text":"Decrease the attribute_three by 50. Returns: Type Description int BaseClass.attribute_three - 50 Source code in viper_boot\\examples\\object_oriented.py 48 49 50 51 52 53 54 55 def instance_method_two ( self ) -> int : \"\"\" Decrease the attribute_three by 50. Returns: BaseClass.attribute_three - 50 \"\"\" return self . __subtract ( self . attribute_three , 50 )","title":"instance_method_two()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.print_docstring","text":"Print docstring of the class. We can also use the help() function to read the docstrings associated with various objects. Example: help(ClassName) Source code in viper_boot\\examples\\object_oriented.py 103 104 105 106 107 108 109 110 111 112 113 114 @classmethod def print_docstring ( cls ) -> None : \"\"\" Print docstring of the class. We can also use the help() function to read the docstrings associated with various objects. Example: help(ClassName) \"\"\" print ( cls . __doc__ )","title":"print_docstring()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.BaseClass.static_method","text":"Check if there is a value. Parameters: Name Type Description Default value int number of instances required Returns: Type Description bool value > 0 Source code in viper_boot\\examples\\object_oriented.py 125 126 127 128 129 130 131 132 133 134 135 136 137 @staticmethod def static_method ( value : int ) -> bool : \"\"\" Check if there is a value. Parameters: value (int): number of instances Returns: value > 0 \"\"\" check : bool = value > 0 return check","title":"static_method()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.DataEncapsulationClass","text":"Bases: BaseClass A Child Class to demonstrate Data Encapsulation. Encapsulation of Data means restricting access to methods and variables. This can prevent the data from being modified by accident (mistake). When we use two underscores \"__\" before attribute name, it makes attribute not accessible outside class. It becomes private attribute which means you can\"t read and write to those attributes except inside the class. When you don\"t use underscore before attribute, it is a public attribute which can be accessed inside or outside a class. Source code in viper_boot\\examples\\object_oriented.py 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 class DataEncapsulationClass ( BaseClass ): \"\"\" A Child Class to demonstrate Data Encapsulation. Encapsulation of Data means restricting access to methods and variables. This can prevent the data from being modified by accident (mistake). - When we use two underscores \"__\" before attribute name, it makes attribute not accessible outside class. It becomes private attribute which means you can\"t read and write to those attributes except inside the class. - When you don\"t use underscore before attribute, it is a public attribute which can be accessed inside or outside a class. \"\"\" # Class properties _private_property : str # Class constructor with method overloading def __init__ ( self , value : str = \"\" ) -> None : \"\"\" Set base class and self properties to default values. Parameters: value (str): __private_attribute argument \"\"\" # Execute base class constructor super () . __init__ () self . _private_attribute = value self . _private_property = value","title":"DataEncapsulationClass"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.DataEncapsulationClass.__init__","text":"Set base class and self properties to default values. Parameters: Name Type Description Default value str __private_attribute argument '' Source code in viper_boot\\examples\\object_oriented.py 277 278 279 280 281 282 283 284 285 286 287 288 def __init__ ( self , value : str = \"\" ) -> None : \"\"\" Set base class and self properties to default values. Parameters: value (str): __private_attribute argument \"\"\" # Execute base class constructor super () . __init__ () self . _private_attribute = value self . _private_property = value","title":"__init__()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.ExceptionHandler","text":"Bases: RuntimeError Handle custom exception in the code base. Source code in viper_boot\\examples\\object_oriented.py 4 5 class ExceptionHandler ( RuntimeError ): \"\"\"Handle custom exception in the code base.\"\"\"","title":"ExceptionHandler"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.GetterSetterDeleterClass","text":"Class to demonstrate Getter, Setter & Deleter. Source code in viper_boot\\examples\\object_oriented.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 class GetterSetterDeleterClass : \"\"\"Class to demonstrate Getter, Setter & Deleter.\"\"\" # Class properties _private_property : str # Class constructor with method overloading def __init__ ( self , attribute_one : str = \"\" , attribute_two : str = \"\" , attribute_three : str = \"\" , ) -> None : \"\"\" Set properties to default values. Parameters: attribute_one (str): attribute one attribute_two (str): attribute two attribute_three (str): attribute three \"\"\" self . _attribute_one = attribute_one self . _attribute_two = attribute_two self . _attribute_three = attribute_three # Getters, Setters & Deleter @property def attribute_one ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one @attribute_one . setter def attribute_one ( self , value : str ) -> None : \"\"\" Setter method for attribute. Parameters: value (str): value to set \"\"\" self . _attribute_one = value self . _private_property = self . _attribute_one + self . _attribute_two @attribute_one . deleter def attribute_one ( self ) -> None : \"\"\"Deleter method for attribute.\"\"\" # noqa del self . _attribute_one @property def attribute_two ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one @attribute_two . setter def attribute_two ( self , value : str ) -> None : \"\"\" Setter method for attribute. Parameters: value (str): value to set \"\"\" self . _attribute_two = value self . _private_property = self . _attribute_one + self . _attribute_two @attribute_two . deleter def attribute_two ( self ) -> None : \"\"\"Deleter method for attribute.\"\"\" # noqa del self . _attribute_two @property def attribute_three ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one @attribute_three . setter def attribute_three ( self , value : str ) -> None : \"\"\" Setter method for attribute. Parameters: value (str): value to set \"\"\" self . _attribute_three = value self . _private_property = self . _attribute_one + self . _attribute_two @attribute_three . deleter def attribute_three ( self ) -> None : \"\"\"Deleter method for attribute.\"\"\" # noqa del self . _attribute_three","title":"GetterSetterDeleterClass"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.GetterSetterDeleterClass.__init__","text":"Set properties to default values. Parameters: Name Type Description Default attribute_one str attribute one '' attribute_two str attribute two '' attribute_three str attribute three '' Source code in viper_boot\\examples\\object_oriented.py 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 def __init__ ( self , attribute_one : str = \"\" , attribute_two : str = \"\" , attribute_three : str = \"\" , ) -> None : \"\"\" Set properties to default values. Parameters: attribute_one (str): attribute one attribute_two (str): attribute two attribute_three (str): attribute three \"\"\" self . _attribute_one = attribute_one self . _attribute_two = attribute_two self . _attribute_three = attribute_three","title":"__init__()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.GetterSetterDeleterClass.attribute_one","text":"Getter method for attribute. Returns: Type Description str attribute value Source code in viper_boot\\examples\\object_oriented.py 318 319 320 321 322 323 324 325 326 @property def attribute_one ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one","title":"attribute_one()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.GetterSetterDeleterClass.attribute_three","text":"Getter method for attribute. Returns: Type Description str attribute value Source code in viper_boot\\examples\\object_oriented.py 370 371 372 373 374 375 376 377 378 @property def attribute_three ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one","title":"attribute_three()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.GetterSetterDeleterClass.attribute_two","text":"Getter method for attribute. Returns: Type Description str attribute value Source code in viper_boot\\examples\\object_oriented.py 344 345 346 347 348 349 350 351 352 @property def attribute_two ( self ) -> str : \"\"\" Getter method for attribute. Returns: attribute value \"\"\" return self . _attribute_one","title":"attribute_two()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.InheritClassWithExtraAttribute","text":"Bases: BaseClass A Child Class inherits Base Class and add extra attribute. Source code in viper_boot\\examples\\object_oriented.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 class InheritClassWithExtraAttribute ( BaseClass ): \"\"\"A Child Class inherits Base Class and add extra attribute.\"\"\" # Class constructor with method overloading def __init__ ( self , extra_attribute : int = 0 ) -> None : \"\"\" Set base class and self properties to default values. Parameters: extra_attribute (int): extra attribute \"\"\" # Execute base class constructor super () . __init__ () self . extra_attribute = extra_attribute or 999","title":"InheritClassWithExtraAttribute"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.InheritClassWithExtraAttribute.__init__","text":"Set base class and self properties to default values. Parameters: Name Type Description Default extra_attribute int extra attribute 0 Source code in viper_boot\\examples\\object_oriented.py 179 180 181 182 183 184 185 186 187 188 189 def __init__ ( self , extra_attribute : int = 0 ) -> None : \"\"\" Set base class and self properties to default values. Parameters: extra_attribute (int): extra attribute \"\"\" # Execute base class constructor super () . __init__ () self . extra_attribute = extra_attribute or 999","title":"__init__()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.InheritMultipleClasses","text":"Bases: InheritClassWithExtraAttribute , SimpleInheritClass A Child Class inherits multiple classes. Method Resolution Order (MRO) is the order in which methods should be inherited in the presence of multiple inheritance. You can view the MRO by using the mro attribute. Example: _class_instance. mro Source code in viper_boot\\examples\\object_oriented.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 class InheritMultipleClasses ( InheritClassWithExtraAttribute , SimpleInheritClass ): \"\"\" A Child Class inherits multiple classes. Method Resolution Order (MRO) is the order in which methods should be inherited in the presence of multiple inheritance. You can view the MRO by using the __mro__ attribute. Example: _class_instance.__mro__ \"\"\" # Class constructor def __init__ ( self ) -> None : \"\"\"Set base class and self properties to default values.\"\"\" # Execute base class constructor super () . __init__ ()","title":"InheritMultipleClasses"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.InheritMultipleClasses.__init__","text":"Set base class and self properties to default values. Source code in viper_boot\\examples\\object_oriented.py 206 207 208 209 def __init__ ( self ) -> None : \"\"\"Set base class and self properties to default values.\"\"\" # Execute base class constructor super () . __init__ ()","title":"__init__()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.PolymorphClass","text":"Bases: BaseClass A Child Class to demonstrate Method Overriding and Method Overloading. Polymorphism means the ability to take various forms. It is an important concept when you deal with child and parent class. Polymorphism in python is applied through method overriding and method overloading. Source code in viper_boot\\examples\\object_oriented.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 class PolymorphClass ( BaseClass ): \"\"\" A Child Class to demonstrate Method Overriding and Method Overloading. Polymorphism means the ability to take various forms. It is an important concept when you deal with child and parent class. Polymorphism in python is applied through method overriding and method overloading. \"\"\" # Class attributes _check : bool # Method overriding (Base class method) def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 50. Method overriding allows us to have a method in the child class with the same name as in the parent class but the definition of the child class method is different from parent class method. Returns: attribute_three + 50 \"\"\" return self . attribute_three + 50 # Method overloading def method_overload ( self , value : int = 0 ) -> bool : \"\"\" Check the value and return a boolean value. It allows you to define a function or method with flexibility so that you can call it with or without arguments. Parameters: value (int): value Returns: value > 0 \"\"\" self . _check = value > 0 return self . _check","title":"PolymorphClass"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.PolymorphClass.instance_method_one","text":"Increase the attribute_three by 50. Method overriding allows us to have a method in the child class with the same name as in the parent class but the definition of the child class method is different from parent class method. Returns: Type Description int attribute_three + 50 Source code in viper_boot\\examples\\object_oriented.py 226 227 228 229 230 231 232 233 234 235 236 237 def instance_method_one ( self ) -> int : \"\"\" Increase the attribute_three by 50. Method overriding allows us to have a method in the child class with the same name as in the parent class but the definition of the child class method is different from parent class method. Returns: attribute_three + 50 \"\"\" return self . attribute_three + 50","title":"instance_method_one()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.PolymorphClass.method_overload","text":"Check the value and return a boolean value. It allows you to define a function or method with flexibility so that you can call it with or without arguments. Parameters: Name Type Description Default value int value 0 Returns: Type Description bool value > 0 Source code in viper_boot\\examples\\object_oriented.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def method_overload ( self , value : int = 0 ) -> bool : \"\"\" Check the value and return a boolean value. It allows you to define a function or method with flexibility so that you can call it with or without arguments. Parameters: value (int): value Returns: value > 0 \"\"\" self . _check = value > 0 return self . _check","title":"method_overload()"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.SimpleInheritClass","text":"Bases: BaseClass A Simple Child Class inherits Base Class. Source code in viper_boot\\examples\\object_oriented.py 169 170 171 172 class SimpleInheritClass ( BaseClass ): \"\"\"A Simple Child Class inherits Base Class.\"\"\" pass # pylint: disable=unnecessary-pass","title":"SimpleInheritClass"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.SingletonClass","text":"A Class demonstrate singleton pattern. Inspired by Gang of Four and The Flyweight patterns Source code in viper_boot\\examples\\object_oriented.py 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 class SingletonClass : \"\"\" A Class demonstrate singleton pattern. Inspired by Gang of Four and The Flyweight patterns \"\"\" _instance = None # Singleton class constructor # Note: mypy does not (yet) support the special behavior of __new__() # using type: ignore def __new__ ( cls ): # type: ignore \"\"\" Singleton object demonstration. Returns: (Any): singleton object \"\"\" if cls . _instance is None : print ( \"Creating the object\" ) cls . _instance = super () . __new__ ( cls ) # Put any initialization here. return cls . _instance","title":"SingletonClass"},{"location":"reference/viper_boot/examples/object_oriented.html#viper_boot.examples.object_oriented.SingletonClass.__new__","text":"Singleton object demonstration. Returns: Type Description Any singleton object Source code in viper_boot\\examples\\object_oriented.py 409 410 411 412 413 414 415 416 417 418 419 420 def __new__ ( cls ): # type: ignore \"\"\" Singleton object demonstration. Returns: (Any): singleton object \"\"\" if cls . _instance is None : print ( \"Creating the object\" ) cls . _instance = super () . __new__ ( cls ) # Put any initialization here. return cls . _instance","title":"__new__()"},{"location":"reference/viper_boot/examples/python.html","text":"Example Python Module. InvalidIntegerError \u00a4 Bases: RuntimeError Error generated if an invalid integer input is given. Source code in viper_boot\\examples\\python.py 4 5 6 7 class InvalidIntegerError ( RuntimeError ): \"\"\"Error generated if an invalid integer input is given.\"\"\" pass # pylint: disable=unnecessary-pass add_number ( operand_one , operand_two ) \u00a4 Accept two integer values and sum them up and return the sum. Example add_number(5 + 5) # xdoctest: +SKIP 10 add_number(1 + 1) # xdoctest: +SKIP 2 add_number(-1 + 2) # xdoctest: +SKIP InvalidIntegerError Parameters: Name Type Description Default operand_one int first number required operand_two int second number required Raises: Type Description InvalidIntegerError If operand_one or operand_two is less than 0. Returns: Type Description int Sum of two numbers Source code in viper_boot\\examples\\python.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def add_number ( operand_one : int , operand_two : int ) -> int : \"\"\" Accept two integer values and sum them up and return the sum. Example: >>> add_number(5 + 5) # xdoctest: +SKIP 10 >>> add_number(1 + 1) # xdoctest: +SKIP 2 >>> add_number(-1 + 2) # xdoctest: +SKIP InvalidIntegerError Parameters: operand_one (int): first number operand_two (int): second number Raises: InvalidIntegerError: If operand_one or operand_two is less than 0. Returns: Sum of two numbers \"\"\" if operand_one < 0 or operand_two < 0 : raise InvalidIntegerError ( f \"\"\"operand_one or operand_two is less than zero: operand_one= { operand_one } , operand_two= { operand_two } \"\"\" ) add : int = operand_one + operand_two return add","title":"python"},{"location":"reference/viper_boot/examples/python.html#viper_boot.examples.python.InvalidIntegerError","text":"Bases: RuntimeError Error generated if an invalid integer input is given. Source code in viper_boot\\examples\\python.py 4 5 6 7 class InvalidIntegerError ( RuntimeError ): \"\"\"Error generated if an invalid integer input is given.\"\"\" pass # pylint: disable=unnecessary-pass","title":"InvalidIntegerError"},{"location":"reference/viper_boot/examples/python.html#viper_boot.examples.python.add_number","text":"Accept two integer values and sum them up and return the sum. Example add_number(5 + 5) # xdoctest: +SKIP 10 add_number(1 + 1) # xdoctest: +SKIP 2 add_number(-1 + 2) # xdoctest: +SKIP InvalidIntegerError Parameters: Name Type Description Default operand_one int first number required operand_two int second number required Raises: Type Description InvalidIntegerError If operand_one or operand_two is less than 0. Returns: Type Description int Sum of two numbers Source code in viper_boot\\examples\\python.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def add_number ( operand_one : int , operand_two : int ) -> int : \"\"\" Accept two integer values and sum them up and return the sum. Example: >>> add_number(5 + 5) # xdoctest: +SKIP 10 >>> add_number(1 + 1) # xdoctest: +SKIP 2 >>> add_number(-1 + 2) # xdoctest: +SKIP InvalidIntegerError Parameters: operand_one (int): first number operand_two (int): second number Raises: InvalidIntegerError: If operand_one or operand_two is less than 0. Returns: Sum of two numbers \"\"\" if operand_one < 0 or operand_two < 0 : raise InvalidIntegerError ( f \"\"\"operand_one or operand_two is less than zero: operand_one= { operand_one } , operand_two= { operand_two } \"\"\" ) add : int = operand_one + operand_two return add","title":"add_number()"},{"location":"reference/viper_boot/models/__init__.html","text":"Models Package.","title":"  init  "},{"location":"reference/viper_boot/models/student_model.html","text":"Student Model. StudentModel \u00a4 A model for student. Source code in viper_boot\\models\\student_model.py 4 5 6 7 class StudentModel : \"\"\"A model for student.\"\"\" pass # pylint: disable=unnecessary-pass","title":"student_model"},{"location":"reference/viper_boot/models/student_model.html#viper_boot.models.student_model.StudentModel","text":"A model for student. Source code in viper_boot\\models\\student_model.py 4 5 6 7 class StudentModel : \"\"\"A model for student.\"\"\" pass # pylint: disable=unnecessary-pass","title":"StudentModel"},{"location":"reference/viper_boot/openapi_docs/__init__.html","text":"Open API Package.","title":"  init  "},{"location":"reference/viper_boot/openapi_docs/open_api.html","text":"Open Api Specs. OpenApi \u00a4 Auto generate Open API specification documents. Source code in viper_boot\\openapi_docs\\open_api.pysingleton class OpenApi : \"\"\"Auto generate Open API specification documents.\"\"\" _DEFAULT_RESPONSE_LOCATION = \"json\" _VALID_RESPONSE_FIELDS = { \"description\" , \"headers\" , \"examples\" } _DOCUMENT_PATH = ( Path () . absolute () . joinpath ( \"src/viper_boot/openapi_docs\" ) ) def __init__ ( self ) -> None : \"\"\"Initialise Open API specs.\"\"\" with open ( \"./openapi.yml\" , encoding = \"utf8\" ) as file_ : yaml_settings = yaml . safe_load ( file_ ) self . _settings = Cut ( yaml_settings ) try : curr_api_ver = subprocess . check_output ( [ \"git\" , \"describe\" , \"--tags\" , \"--abbrev=0\" ] ) . strip () . decode () except BaseException : curr_api_ver = \"0.0.1\" title = self . _settings [ \"info.title\" ] api_version = curr_api_ver openapi_version = self . _settings [ \"openapi\" ] self . _marshmallow_plugin = MarshmallowPlugin ( schema_name_resolver = self . _resolver ) self . _spec = APISpec ( title = title , version = api_version , openapi_version = openapi_version , plugins = ( self . _marshmallow_plugin ,), ** self . _settings , ) # Add security scheme self . security_scheme () # Initialise document server self . _index_page : str = \"\" self . _server = _OpenApiServer def security_scheme ( self ) -> None : \"\"\"Add Open API security scheme.\"\"\" api_key_scheme : Dict [ Any , Any ] = apikey_header . security_header jwt_scheme : Dict [ Any , Any ] = jwt_header . security_header self . _spec . components . security_scheme ( \"api_key\" , api_key_scheme ) self . _spec . components . security_scheme ( \"jwt\" , jwt_scheme ) def generate_spec ( self ) -> Dict [ str , Any ]: \"\"\"Generate Open API spec as JSON string. Returns: OpenAPI spec document \"\"\" return self . _spec . to_dict () def generate_doc ( self ) -> None : \"\"\"Write Open API spec as JSON file.\"\"\" try : os . remove ( \"openapi_spec.json\" ) except FileNotFoundError : pass with open ( \"openapi_spec.json\" , \"w\" , encoding = \"utf8\" ) as outfile : json . dump ( self . generate_spec (), outfile , indent = 2 ) def serve_doc ( self ) -> None : \"\"\"Serve Open API documents.\"\"\" with open ( self . _DOCUMENT_PATH / \"site\" / \"index.html\" , encoding = \"utf8\" ) as template_index_html : self . _index_page = Template ( template_index_html . read ()) . render ( path = \"openapi_spec.json\" , static = self . _DOCUMENT_PATH / \"site\" , spec = json . dumps ( self . generate_spec (), indent = 2 ), ) host = self . _settings [ \"servers[0].variables.host.default\" ] port = self . _settings [ \"servers[0].variables.port.default\" ] open_api_server = HTTPServer (( host , port ), _OpenApiServer ) try : print ( f \"OpenAPI server started http:// { host } : { port } \" ) open_api_server . serve_forever () except KeyboardInterrupt : print ( \" \\n Keyboard interrupt received, exiting.\" ) finally : open_api_server . server_close () @staticmethod def _resolver ( schema : Any ) -> Any : \"\"\"Marshmallow plugin schema resolver. Parameters: schema (Any): schema object Returns: schema object \"\"\" schema_instance = common . resolve_schema_instance ( schema ) prefix = \"Partial-\" if schema_instance . partial else \"\" # mypy: allow-untyped-calls schema_cls = common . resolve_schema_cls ( schema ) name = prefix + schema_cls . __name__ if name . endswith ( \"Schema\" ): _name = name [: - 6 ] or name return _name return name def register ( self , path : str , handler : Any ) -> None : \"\"\"Register handler with OpenApi spec. Parameters: path (str): API path handler (Any): handler function Returns: any value \"\"\" if not hasattr ( handler , \"__apispec__\" ): return None data : Any = handler . __apispec__ http_method = data . pop ( \"method\" ) or \"get\" http_method = http_method . lower () if http_method not in VALID_METHODS_OPENAPI_V2 : return None for schema in data . pop ( \"schemas\" , []): parameters = self . _marshmallow_plugin . converter . schema2parameters ( schema [ \"schema\" ], location = schema [ \"location\" ], ** schema [ \"options\" ], ) self . _add_examples ( schema [ \"schema\" ], parameters , schema [ \"example\" ]) data [ \"parameters\" ] . extend ( parameters ) existing = [ p [ \"name\" ] for p in data [ \"parameters\" ] if p [ \"in\" ] == \"path\" ] data [ \"parameters\" ] . extend ( { \"in\" : \"path\" , \"name\" : path_key , \"required\" : True , \"type\" : \"string\" , } for path_key in get_path_keys ( path ) if path_key not in existing ) if \"responses\" in data : responses = {} for code , actual_params in data [ \"responses\" ] . items (): if \"schema\" in actual_params : raw_parameters = ( self . _marshmallow_plugin . converter . schema2parameters ( actual_params [ \"schema\" ], location = self . _DEFAULT_RESPONSE_LOCATION , required = actual_params . get ( \"required\" , False ), )[ 0 ] ) updated_params = { k : v for k , v in raw_parameters . items () if k in self . _VALID_RESPONSE_FIELDS } updated_params [ \"schema\" ] = actual_params [ \"schema\" ] for extra_info in self . _VALID_RESPONSE_FIELDS : if extra_info in actual_params : updated_params [ extra_info ] = actual_params [ extra_info ] responses [ code ] = updated_params else : responses [ code ] = actual_params data [ \"responses\" ] = responses operations = copy . deepcopy ( data ) self . _spec . path ( path = path , operations = { http_method : operations }) def _add_examples ( self , ref_schema : Any , endpoint_schema : Any , example : Any ) -> None : \"\"\"Register handler with OpenApi spec. Parameters: ref_schema (Any): reference schema, endpoint_schema (Any): endpoint schema, example (Any): example schema, Returns: None \"\"\" def add_to_endpoint_or_ref () -> None : \"\"\"Add reference or endpoint to OpenAPI spec.\"\"\" if add_to_refs : self . spec . components . schemas [ name ][ \"example\" ] = example else : endpoint_schema [ 0 ][ \"schema\" ][ \"allOf\" ] = [ endpoint_schema [ 0 ][ \"schema\" ] . pop ( \"$ref\" ) ] endpoint_schema [ 0 ][ \"schema\" ][ \"example\" ] = example if not example : return schema_instance = common . resolve_schema_instance ( ref_schema ) name = self . _marshmallow_plugin . converter . schema_name_resolver ( schema_instance ) add_to_refs = example . pop ( \"add_to_refs\" ) if self . _spec . components . openapi_version . major < 3 : if name and name in self . _spec . components . schemas : add_to_endpoint_or_ref () else : add_to_endpoint_or_ref () @property def spec ( self ) -> Any : \"\"\"Getter method for Open Api specs. Returns: Open Api specs object \"\"\" return self . _spec @property def index_page ( self ) -> Any : \"\"\"Getter method for Open Api index html file. Returns: Open Api index html file \"\"\" return self . _index_page __init__ () \u00a4 Initialise Open API specs. Source code in viper_boot\\openapi_docs\\open_api.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def __init__ ( self ) -> None : \"\"\"Initialise Open API specs.\"\"\" with open ( \"./openapi.yml\" , encoding = \"utf8\" ) as file_ : yaml_settings = yaml . safe_load ( file_ ) self . _settings = Cut ( yaml_settings ) try : curr_api_ver = subprocess . check_output ( [ \"git\" , \"describe\" , \"--tags\" , \"--abbrev=0\" ] ) . strip () . decode () except BaseException : curr_api_ver = \"0.0.1\" title = self . _settings [ \"info.title\" ] api_version = curr_api_ver openapi_version = self . _settings [ \"openapi\" ] self . _marshmallow_plugin = MarshmallowPlugin ( schema_name_resolver = self . _resolver ) self . _spec = APISpec ( title = title , version = api_version , openapi_version = openapi_version , plugins = ( self . _marshmallow_plugin ,), ** self . _settings , ) # Add security scheme self . security_scheme () # Initialise document server self . _index_page : str = \"\" self . _server = _OpenApiServer generate_doc () \u00a4 Write Open API spec as JSON file. Source code in viper_boot\\openapi_docs\\open_api.py 88 89 90 91 92 93 94 95 96 def generate_doc ( self ) -> None : \"\"\"Write Open API spec as JSON file.\"\"\" try : os . remove ( \"openapi_spec.json\" ) except FileNotFoundError : pass with open ( \"openapi_spec.json\" , \"w\" , encoding = \"utf8\" ) as outfile : json . dump ( self . generate_spec (), outfile , indent = 2 ) generate_spec () \u00a4 Generate Open API spec as JSON string. Returns: Type Description Dict [ str , Any ] OpenAPI spec document Source code in viper_boot\\openapi_docs\\open_api.py 80 81 82 83 84 85 86 def generate_spec ( self ) -> Dict [ str , Any ]: \"\"\"Generate Open API spec as JSON string. Returns: OpenAPI spec document \"\"\" return self . _spec . to_dict () index_page () property \u00a4 Getter method for Open Api index html file. Returns: Type Description Any Open Api index html file Source code in viper_boot\\openapi_docs\\open_api.py 262 263 264 265 266 267 268 269 @property def index_page ( self ) -> Any : \"\"\"Getter method for Open Api index html file. Returns: Open Api index html file \"\"\" return self . _index_page register ( path , handler ) \u00a4 Register handler with OpenApi spec. Parameters: Name Type Description Default path str API path required handler Any handler function required Returns: Type Description None any value Source code in viper_boot\\openapi_docs\\open_api.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def register ( self , path : str , handler : Any ) -> None : \"\"\"Register handler with OpenApi spec. Parameters: path (str): API path handler (Any): handler function Returns: any value \"\"\" if not hasattr ( handler , \"__apispec__\" ): return None data : Any = handler . __apispec__ http_method = data . pop ( \"method\" ) or \"get\" http_method = http_method . lower () if http_method not in VALID_METHODS_OPENAPI_V2 : return None for schema in data . pop ( \"schemas\" , []): parameters = self . _marshmallow_plugin . converter . schema2parameters ( schema [ \"schema\" ], location = schema [ \"location\" ], ** schema [ \"options\" ], ) self . _add_examples ( schema [ \"schema\" ], parameters , schema [ \"example\" ]) data [ \"parameters\" ] . extend ( parameters ) existing = [ p [ \"name\" ] for p in data [ \"parameters\" ] if p [ \"in\" ] == \"path\" ] data [ \"parameters\" ] . extend ( { \"in\" : \"path\" , \"name\" : path_key , \"required\" : True , \"type\" : \"string\" , } for path_key in get_path_keys ( path ) if path_key not in existing ) if \"responses\" in data : responses = {} for code , actual_params in data [ \"responses\" ] . items (): if \"schema\" in actual_params : raw_parameters = ( self . _marshmallow_plugin . converter . schema2parameters ( actual_params [ \"schema\" ], location = self . _DEFAULT_RESPONSE_LOCATION , required = actual_params . get ( \"required\" , False ), )[ 0 ] ) updated_params = { k : v for k , v in raw_parameters . items () if k in self . _VALID_RESPONSE_FIELDS } updated_params [ \"schema\" ] = actual_params [ \"schema\" ] for extra_info in self . _VALID_RESPONSE_FIELDS : if extra_info in actual_params : updated_params [ extra_info ] = actual_params [ extra_info ] responses [ code ] = updated_params else : responses [ code ] = actual_params data [ \"responses\" ] = responses operations = copy . deepcopy ( data ) self . _spec . path ( path = path , operations = { http_method : operations }) security_scheme () \u00a4 Add Open API security scheme. Source code in viper_boot\\openapi_docs\\open_api.py 72 73 74 75 76 77 78 def security_scheme ( self ) -> None : \"\"\"Add Open API security scheme.\"\"\" api_key_scheme : Dict [ Any , Any ] = apikey_header . security_header jwt_scheme : Dict [ Any , Any ] = jwt_header . security_header self . _spec . components . security_scheme ( \"api_key\" , api_key_scheme ) self . _spec . components . security_scheme ( \"jwt\" , jwt_scheme ) serve_doc () \u00a4 Serve Open API documents. Source code in viper_boot\\openapi_docs\\open_api.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def serve_doc ( self ) -> None : \"\"\"Serve Open API documents.\"\"\" with open ( self . _DOCUMENT_PATH / \"site\" / \"index.html\" , encoding = \"utf8\" ) as template_index_html : self . _index_page = Template ( template_index_html . read ()) . render ( path = \"openapi_spec.json\" , static = self . _DOCUMENT_PATH / \"site\" , spec = json . dumps ( self . generate_spec (), indent = 2 ), ) host = self . _settings [ \"servers[0].variables.host.default\" ] port = self . _settings [ \"servers[0].variables.port.default\" ] open_api_server = HTTPServer (( host , port ), _OpenApiServer ) try : print ( f \"OpenAPI server started http:// { host } : { port } \" ) open_api_server . serve_forever () except KeyboardInterrupt : print ( \" \\n Keyboard interrupt received, exiting.\" ) finally : open_api_server . server_close () spec () property \u00a4 Getter method for Open Api specs. Returns: Type Description Any Open Api specs object Source code in viper_boot\\openapi_docs\\open_api.py 253 254 255 256 257 258 259 260 @property def spec ( self ) -> Any : \"\"\"Getter method for Open Api specs. Returns: Open Api specs object \"\"\" return self . _spec","title":"open_api"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi","text":"Auto generate Open API specification documents. Source code in viper_boot\\openapi_docs\\open_api.pysingleton class OpenApi : \"\"\"Auto generate Open API specification documents.\"\"\" _DEFAULT_RESPONSE_LOCATION = \"json\" _VALID_RESPONSE_FIELDS = { \"description\" , \"headers\" , \"examples\" } _DOCUMENT_PATH = ( Path () . absolute () . joinpath ( \"src/viper_boot/openapi_docs\" ) ) def __init__ ( self ) -> None : \"\"\"Initialise Open API specs.\"\"\" with open ( \"./openapi.yml\" , encoding = \"utf8\" ) as file_ : yaml_settings = yaml . safe_load ( file_ ) self . _settings = Cut ( yaml_settings ) try : curr_api_ver = subprocess . check_output ( [ \"git\" , \"describe\" , \"--tags\" , \"--abbrev=0\" ] ) . strip () . decode () except BaseException : curr_api_ver = \"0.0.1\" title = self . _settings [ \"info.title\" ] api_version = curr_api_ver openapi_version = self . _settings [ \"openapi\" ] self . _marshmallow_plugin = MarshmallowPlugin ( schema_name_resolver = self . _resolver ) self . _spec = APISpec ( title = title , version = api_version , openapi_version = openapi_version , plugins = ( self . _marshmallow_plugin ,), ** self . _settings , ) # Add security scheme self . security_scheme () # Initialise document server self . _index_page : str = \"\" self . _server = _OpenApiServer def security_scheme ( self ) -> None : \"\"\"Add Open API security scheme.\"\"\" api_key_scheme : Dict [ Any , Any ] = apikey_header . security_header jwt_scheme : Dict [ Any , Any ] = jwt_header . security_header self . _spec . components . security_scheme ( \"api_key\" , api_key_scheme ) self . _spec . components . security_scheme ( \"jwt\" , jwt_scheme ) def generate_spec ( self ) -> Dict [ str , Any ]: \"\"\"Generate Open API spec as JSON string. Returns: OpenAPI spec document \"\"\" return self . _spec . to_dict () def generate_doc ( self ) -> None : \"\"\"Write Open API spec as JSON file.\"\"\" try : os . remove ( \"openapi_spec.json\" ) except FileNotFoundError : pass with open ( \"openapi_spec.json\" , \"w\" , encoding = \"utf8\" ) as outfile : json . dump ( self . generate_spec (), outfile , indent = 2 ) def serve_doc ( self ) -> None : \"\"\"Serve Open API documents.\"\"\" with open ( self . _DOCUMENT_PATH / \"site\" / \"index.html\" , encoding = \"utf8\" ) as template_index_html : self . _index_page = Template ( template_index_html . read ()) . render ( path = \"openapi_spec.json\" , static = self . _DOCUMENT_PATH / \"site\" , spec = json . dumps ( self . generate_spec (), indent = 2 ), ) host = self . _settings [ \"servers[0].variables.host.default\" ] port = self . _settings [ \"servers[0].variables.port.default\" ] open_api_server = HTTPServer (( host , port ), _OpenApiServer ) try : print ( f \"OpenAPI server started http:// { host } : { port } \" ) open_api_server . serve_forever () except KeyboardInterrupt : print ( \" \\n Keyboard interrupt received, exiting.\" ) finally : open_api_server . server_close () @staticmethod def _resolver ( schema : Any ) -> Any : \"\"\"Marshmallow plugin schema resolver. Parameters: schema (Any): schema object Returns: schema object \"\"\" schema_instance = common . resolve_schema_instance ( schema ) prefix = \"Partial-\" if schema_instance . partial else \"\" # mypy: allow-untyped-calls schema_cls = common . resolve_schema_cls ( schema ) name = prefix + schema_cls . __name__ if name . endswith ( \"Schema\" ): _name = name [: - 6 ] or name return _name return name def register ( self , path : str , handler : Any ) -> None : \"\"\"Register handler with OpenApi spec. Parameters: path (str): API path handler (Any): handler function Returns: any value \"\"\" if not hasattr ( handler , \"__apispec__\" ): return None data : Any = handler . __apispec__ http_method = data . pop ( \"method\" ) or \"get\" http_method = http_method . lower () if http_method not in VALID_METHODS_OPENAPI_V2 : return None for schema in data . pop ( \"schemas\" , []): parameters = self . _marshmallow_plugin . converter . schema2parameters ( schema [ \"schema\" ], location = schema [ \"location\" ], ** schema [ \"options\" ], ) self . _add_examples ( schema [ \"schema\" ], parameters , schema [ \"example\" ]) data [ \"parameters\" ] . extend ( parameters ) existing = [ p [ \"name\" ] for p in data [ \"parameters\" ] if p [ \"in\" ] == \"path\" ] data [ \"parameters\" ] . extend ( { \"in\" : \"path\" , \"name\" : path_key , \"required\" : True , \"type\" : \"string\" , } for path_key in get_path_keys ( path ) if path_key not in existing ) if \"responses\" in data : responses = {} for code , actual_params in data [ \"responses\" ] . items (): if \"schema\" in actual_params : raw_parameters = ( self . _marshmallow_plugin . converter . schema2parameters ( actual_params [ \"schema\" ], location = self . _DEFAULT_RESPONSE_LOCATION , required = actual_params . get ( \"required\" , False ), )[ 0 ] ) updated_params = { k : v for k , v in raw_parameters . items () if k in self . _VALID_RESPONSE_FIELDS } updated_params [ \"schema\" ] = actual_params [ \"schema\" ] for extra_info in self . _VALID_RESPONSE_FIELDS : if extra_info in actual_params : updated_params [ extra_info ] = actual_params [ extra_info ] responses [ code ] = updated_params else : responses [ code ] = actual_params data [ \"responses\" ] = responses operations = copy . deepcopy ( data ) self . _spec . path ( path = path , operations = { http_method : operations }) def _add_examples ( self , ref_schema : Any , endpoint_schema : Any , example : Any ) -> None : \"\"\"Register handler with OpenApi spec. Parameters: ref_schema (Any): reference schema, endpoint_schema (Any): endpoint schema, example (Any): example schema, Returns: None \"\"\" def add_to_endpoint_or_ref () -> None : \"\"\"Add reference or endpoint to OpenAPI spec.\"\"\" if add_to_refs : self . spec . components . schemas [ name ][ \"example\" ] = example else : endpoint_schema [ 0 ][ \"schema\" ][ \"allOf\" ] = [ endpoint_schema [ 0 ][ \"schema\" ] . pop ( \"$ref\" ) ] endpoint_schema [ 0 ][ \"schema\" ][ \"example\" ] = example if not example : return schema_instance = common . resolve_schema_instance ( ref_schema ) name = self . _marshmallow_plugin . converter . schema_name_resolver ( schema_instance ) add_to_refs = example . pop ( \"add_to_refs\" ) if self . _spec . components . openapi_version . major < 3 : if name and name in self . _spec . components . schemas : add_to_endpoint_or_ref () else : add_to_endpoint_or_ref () @property def spec ( self ) -> Any : \"\"\"Getter method for Open Api specs. Returns: Open Api specs object \"\"\" return self . _spec @property def index_page ( self ) -> Any : \"\"\"Getter method for Open Api index html file. Returns: Open Api index html file \"\"\" return self . _index_page","title":"OpenApi"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.__init__","text":"Initialise Open API specs. Source code in viper_boot\\openapi_docs\\open_api.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def __init__ ( self ) -> None : \"\"\"Initialise Open API specs.\"\"\" with open ( \"./openapi.yml\" , encoding = \"utf8\" ) as file_ : yaml_settings = yaml . safe_load ( file_ ) self . _settings = Cut ( yaml_settings ) try : curr_api_ver = subprocess . check_output ( [ \"git\" , \"describe\" , \"--tags\" , \"--abbrev=0\" ] ) . strip () . decode () except BaseException : curr_api_ver = \"0.0.1\" title = self . _settings [ \"info.title\" ] api_version = curr_api_ver openapi_version = self . _settings [ \"openapi\" ] self . _marshmallow_plugin = MarshmallowPlugin ( schema_name_resolver = self . _resolver ) self . _spec = APISpec ( title = title , version = api_version , openapi_version = openapi_version , plugins = ( self . _marshmallow_plugin ,), ** self . _settings , ) # Add security scheme self . security_scheme () # Initialise document server self . _index_page : str = \"\" self . _server = _OpenApiServer","title":"__init__()"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.generate_doc","text":"Write Open API spec as JSON file. Source code in viper_boot\\openapi_docs\\open_api.py 88 89 90 91 92 93 94 95 96 def generate_doc ( self ) -> None : \"\"\"Write Open API spec as JSON file.\"\"\" try : os . remove ( \"openapi_spec.json\" ) except FileNotFoundError : pass with open ( \"openapi_spec.json\" , \"w\" , encoding = \"utf8\" ) as outfile : json . dump ( self . generate_spec (), outfile , indent = 2 )","title":"generate_doc()"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.generate_spec","text":"Generate Open API spec as JSON string. Returns: Type Description Dict [ str , Any ] OpenAPI spec document Source code in viper_boot\\openapi_docs\\open_api.py 80 81 82 83 84 85 86 def generate_spec ( self ) -> Dict [ str , Any ]: \"\"\"Generate Open API spec as JSON string. Returns: OpenAPI spec document \"\"\" return self . _spec . to_dict ()","title":"generate_spec()"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.index_page","text":"Getter method for Open Api index html file. Returns: Type Description Any Open Api index html file Source code in viper_boot\\openapi_docs\\open_api.py 262 263 264 265 266 267 268 269 @property def index_page ( self ) -> Any : \"\"\"Getter method for Open Api index html file. Returns: Open Api index html file \"\"\" return self . _index_page","title":"index_page()"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.register","text":"Register handler with OpenApi spec. Parameters: Name Type Description Default path str API path required handler Any handler function required Returns: Type Description None any value Source code in viper_boot\\openapi_docs\\open_api.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def register ( self , path : str , handler : Any ) -> None : \"\"\"Register handler with OpenApi spec. Parameters: path (str): API path handler (Any): handler function Returns: any value \"\"\" if not hasattr ( handler , \"__apispec__\" ): return None data : Any = handler . __apispec__ http_method = data . pop ( \"method\" ) or \"get\" http_method = http_method . lower () if http_method not in VALID_METHODS_OPENAPI_V2 : return None for schema in data . pop ( \"schemas\" , []): parameters = self . _marshmallow_plugin . converter . schema2parameters ( schema [ \"schema\" ], location = schema [ \"location\" ], ** schema [ \"options\" ], ) self . _add_examples ( schema [ \"schema\" ], parameters , schema [ \"example\" ]) data [ \"parameters\" ] . extend ( parameters ) existing = [ p [ \"name\" ] for p in data [ \"parameters\" ] if p [ \"in\" ] == \"path\" ] data [ \"parameters\" ] . extend ( { \"in\" : \"path\" , \"name\" : path_key , \"required\" : True , \"type\" : \"string\" , } for path_key in get_path_keys ( path ) if path_key not in existing ) if \"responses\" in data : responses = {} for code , actual_params in data [ \"responses\" ] . items (): if \"schema\" in actual_params : raw_parameters = ( self . _marshmallow_plugin . converter . schema2parameters ( actual_params [ \"schema\" ], location = self . _DEFAULT_RESPONSE_LOCATION , required = actual_params . get ( \"required\" , False ), )[ 0 ] ) updated_params = { k : v for k , v in raw_parameters . items () if k in self . _VALID_RESPONSE_FIELDS } updated_params [ \"schema\" ] = actual_params [ \"schema\" ] for extra_info in self . _VALID_RESPONSE_FIELDS : if extra_info in actual_params : updated_params [ extra_info ] = actual_params [ extra_info ] responses [ code ] = updated_params else : responses [ code ] = actual_params data [ \"responses\" ] = responses operations = copy . deepcopy ( data ) self . _spec . path ( path = path , operations = { http_method : operations })","title":"register()"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.security_scheme","text":"Add Open API security scheme. Source code in viper_boot\\openapi_docs\\open_api.py 72 73 74 75 76 77 78 def security_scheme ( self ) -> None : \"\"\"Add Open API security scheme.\"\"\" api_key_scheme : Dict [ Any , Any ] = apikey_header . security_header jwt_scheme : Dict [ Any , Any ] = jwt_header . security_header self . _spec . components . security_scheme ( \"api_key\" , api_key_scheme ) self . _spec . components . security_scheme ( \"jwt\" , jwt_scheme )","title":"security_scheme()"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.serve_doc","text":"Serve Open API documents. Source code in viper_boot\\openapi_docs\\open_api.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def serve_doc ( self ) -> None : \"\"\"Serve Open API documents.\"\"\" with open ( self . _DOCUMENT_PATH / \"site\" / \"index.html\" , encoding = \"utf8\" ) as template_index_html : self . _index_page = Template ( template_index_html . read ()) . render ( path = \"openapi_spec.json\" , static = self . _DOCUMENT_PATH / \"site\" , spec = json . dumps ( self . generate_spec (), indent = 2 ), ) host = self . _settings [ \"servers[0].variables.host.default\" ] port = self . _settings [ \"servers[0].variables.port.default\" ] open_api_server = HTTPServer (( host , port ), _OpenApiServer ) try : print ( f \"OpenAPI server started http:// { host } : { port } \" ) open_api_server . serve_forever () except KeyboardInterrupt : print ( \" \\n Keyboard interrupt received, exiting.\" ) finally : open_api_server . server_close ()","title":"serve_doc()"},{"location":"reference/viper_boot/openapi_docs/open_api.html#viper_boot.openapi_docs.open_api.OpenApi.spec","text":"Getter method for Open Api specs. Returns: Type Description Any Open Api specs object Source code in viper_boot\\openapi_docs\\open_api.py 253 254 255 256 257 258 259 260 @property def spec ( self ) -> Any : \"\"\"Getter method for Open Api specs. Returns: Open Api specs object \"\"\" return self . _spec","title":"spec()"},{"location":"reference/viper_boot/openapi_docs/security_scheme.html","text":"Authentication Scheme.","title":"security_scheme"},{"location":"reference/viper_boot/openapi_docs/utils.html","text":"OpenAPI spec utilities. get_path_keys ( path ) \u00a4 Get keys from the path specified. Parameters: Name Type Description Default path str Path string required Returns: Type Description Any keys in the path Source code in viper_boot\\openapi_docs\\utils.py 6 7 8 9 10 11 12 13 14 15 16 def get_path_keys ( path : str ) -> Any : \"\"\" Get keys from the path specified. Parameters: path (str): Path string Returns: keys in the path \"\"\" return [ i [ 1 ] for i in Formatter () . parse ( path ) if i [ 1 ]]","title":"utils"},{"location":"reference/viper_boot/openapi_docs/utils.html#viper_boot.openapi_docs.utils.get_path_keys","text":"Get keys from the path specified. Parameters: Name Type Description Default path str Path string required Returns: Type Description Any keys in the path Source code in viper_boot\\openapi_docs\\utils.py 6 7 8 9 10 11 12 13 14 15 16 def get_path_keys ( path : str ) -> Any : \"\"\" Get keys from the path specified. Parameters: path (str): Path string Returns: keys in the path \"\"\" return [ i [ 1 ] for i in Formatter () . parse ( path ) if i [ 1 ]]","title":"get_path_keys()"},{"location":"reference/viper_boot/openapi_docs/decorators/__init__.html","text":"Open API Decorators Package.","title":"  init  "},{"location":"reference/viper_boot/openapi_docs/decorators/openapi.html","text":"Open Api Specs decorator. openapi ( ** kwargs ) \u00a4 Add docs info into the openapi spec. Parameters: Name Type Description Default **kwargs Any arguments {} Returns: Type Description Any function of annotation Source code in viper_boot\\openapi_docs\\decorators\\openapi.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def openapi ( ** kwargs : Any ) -> Any : \"\"\"Add docs info into the openapi spec. Parameters: **kwargs (Any): arguments Returns: function of annotation \"\"\" # noqa: RST210 def wrapper ( func : Any ) -> Any : # Does not require by Open API Sec >=3.0 # if not kwargs.get(\"produces\"): # kwargs[\"produces\"] = [\"application/json\"] if not hasattr ( func , \"__apispec__\" ): func . __apispec__ = { \"schemas\" : [], \"responses\" : {}, \"parameters\" : [], } func . __schemas__ = [] extra_parameters = kwargs . pop ( \"parameters\" , []) extra_responses = kwargs . pop ( \"responses\" , {}) func . __apispec__ [ \"parameters\" ] . extend ( extra_parameters ) func . __apispec__ [ \"responses\" ] . update ( extra_responses ) func . __apispec__ . update ( kwargs ) return func return wrapper","title":"openapi"},{"location":"reference/viper_boot/openapi_docs/decorators/openapi.html#viper_boot.openapi_docs.decorators.openapi.openapi","text":"Add docs info into the openapi spec. Parameters: Name Type Description Default **kwargs Any arguments {} Returns: Type Description Any function of annotation Source code in viper_boot\\openapi_docs\\decorators\\openapi.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def openapi ( ** kwargs : Any ) -> Any : \"\"\"Add docs info into the openapi spec. Parameters: **kwargs (Any): arguments Returns: function of annotation \"\"\" # noqa: RST210 def wrapper ( func : Any ) -> Any : # Does not require by Open API Sec >=3.0 # if not kwargs.get(\"produces\"): # kwargs[\"produces\"] = [\"application/json\"] if not hasattr ( func , \"__apispec__\" ): func . __apispec__ = { \"schemas\" : [], \"responses\" : {}, \"parameters\" : [], } func . __schemas__ = [] extra_parameters = kwargs . pop ( \"parameters\" , []) extra_responses = kwargs . pop ( \"responses\" , {}) func . __apispec__ [ \"parameters\" ] . extend ( extra_parameters ) func . __apispec__ [ \"responses\" ] . update ( extra_responses ) func . __apispec__ . update ( kwargs ) return func return wrapper","title":"openapi()"},{"location":"reference/viper_boot/openapi_docs/decorators/request.html","text":"Open Api Specs request decorator. request_schema ( schema , location = 'json' , put_into = None , example = None , add_to_refs = False , ** kwargs ) \u00a4 Request info for Open API docs. Add request info into the swagger spec. put_into (Any): name of the key in Request object where validated data will be placed. If None (by default) default key will be used add_to_refs (bool): Working only if example not None, if True, add example for ref schema, otherwise add example to endpoint. Parameters: Name Type Description Default schema Any Schema <marshmallow.Schema> class or instance required location str Default request locations to parse 'json' put_into Any name of the key in Request object None example Any Adding example for current schema None add_to_refs bool Default False False **kwargs Any extra arguments {} Raises: Type Description ValueError if invalid location found or if multiple location found Returns: Type Description Any function of annotation Source code in viper_boot\\openapi_docs\\decorators\\request.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def request_schema ( schema : Any , location : str = \"json\" , put_into : Any = None , example : Any = None , add_to_refs : bool = False , ** kwargs : Any , ) -> Any : \"\"\"Request info for Open API docs. Add request info into the swagger spec. put_into (Any): name of the key in Request object where validated data will be placed. If None (by default) default key will be used add_to_refs (bool): Working only if example not None, if True, add example for ref schema, otherwise add example to endpoint. Parameters: schema (Any): `Schema <marshmallow.Schema>` class or instance location (str): Default request locations to parse put_into (Any): name of the key in Request object example (Any): Adding example for current schema add_to_refs (bool): Default False **kwargs (Any): extra arguments Raises: ValueError: if invalid location found or if multiple location found Returns: function of annotation \"\"\" # noqa: RST210 if location not in VALID_SCHEMA_LOCATIONS : raise ValueError ( f \"Invalid location argument: { location } \" ) if callable ( schema ): schema = schema () options = { \"required\" : kwargs . pop ( \"required\" , False )} def wrapper ( func : Any ) -> Any : if not hasattr ( func , \"__apispec__\" ): func . __apispec__ = { \"schemas\" : [], \"responses\" : {}, \"parameters\" : [], } func . __schemas__ = [] _example = copy . copy ( example ) or {} if _example : _example [ \"add_to_refs\" ] = add_to_refs func . __apispec__ [ \"schemas\" ] . append ( { \"schema\" : schema , \"location\" : location , \"options\" : options , \"example\" : _example , } ) # \"body\" location was replaced by \"json\" location if location == \"json\" and any ( func_schema [ \"location\" ] == \"json\" for func_schema in func . __schemas__ ): raise RuntimeError ( \"Multiple json locations are not allowed\" ) func . __schemas__ . append ( { \"schema\" : schema , \"location\" : location , \"put_into\" : put_into } ) return func return wrapper","title":"request"},{"location":"reference/viper_boot/openapi_docs/decorators/request.html#viper_boot.openapi_docs.decorators.request.request_schema","text":"Request info for Open API docs. Add request info into the swagger spec. put_into (Any): name of the key in Request object where validated data will be placed. If None (by default) default key will be used add_to_refs (bool): Working only if example not None, if True, add example for ref schema, otherwise add example to endpoint. Parameters: Name Type Description Default schema Any Schema <marshmallow.Schema> class or instance required location str Default request locations to parse 'json' put_into Any name of the key in Request object None example Any Adding example for current schema None add_to_refs bool Default False False **kwargs Any extra arguments {} Raises: Type Description ValueError if invalid location found or if multiple location found Returns: Type Description Any function of annotation Source code in viper_boot\\openapi_docs\\decorators\\request.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def request_schema ( schema : Any , location : str = \"json\" , put_into : Any = None , example : Any = None , add_to_refs : bool = False , ** kwargs : Any , ) -> Any : \"\"\"Request info for Open API docs. Add request info into the swagger spec. put_into (Any): name of the key in Request object where validated data will be placed. If None (by default) default key will be used add_to_refs (bool): Working only if example not None, if True, add example for ref schema, otherwise add example to endpoint. Parameters: schema (Any): `Schema <marshmallow.Schema>` class or instance location (str): Default request locations to parse put_into (Any): name of the key in Request object example (Any): Adding example for current schema add_to_refs (bool): Default False **kwargs (Any): extra arguments Raises: ValueError: if invalid location found or if multiple location found Returns: function of annotation \"\"\" # noqa: RST210 if location not in VALID_SCHEMA_LOCATIONS : raise ValueError ( f \"Invalid location argument: { location } \" ) if callable ( schema ): schema = schema () options = { \"required\" : kwargs . pop ( \"required\" , False )} def wrapper ( func : Any ) -> Any : if not hasattr ( func , \"__apispec__\" ): func . __apispec__ = { \"schemas\" : [], \"responses\" : {}, \"parameters\" : [], } func . __schemas__ = [] _example = copy . copy ( example ) or {} if _example : _example [ \"add_to_refs\" ] = add_to_refs func . __apispec__ [ \"schemas\" ] . append ( { \"schema\" : schema , \"location\" : location , \"options\" : options , \"example\" : _example , } ) # \"body\" location was replaced by \"json\" location if location == \"json\" and any ( func_schema [ \"location\" ] == \"json\" for func_schema in func . __schemas__ ): raise RuntimeError ( \"Multiple json locations are not allowed\" ) func . __schemas__ . append ( { \"schema\" : schema , \"location\" : location , \"put_into\" : put_into } ) return func return wrapper","title":"request_schema()"},{"location":"reference/viper_boot/openapi_docs/decorators/response.html","text":"Open Api Specs response decorator. response_schema ( schema , code = 200 , required = False , description = '' ) \u00a4 Add response info into the swagger spec. Parameters: Name Type Description Default description str response description '' required bool required or not False schema Any (Any): Schema <marshmallow.Schema> class or instance required code int HTTP response code 200 Returns: Type Description Any function of annotation Source code in viper_boot\\openapi_docs\\decorators\\response.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def response_schema ( schema : Any , code : int = 200 , required : bool = False , description : str = \"\" , ) -> Any : \"\"\"Add response info into the swagger spec. Parameters: description (str): response description required (bool): required or not schema: (Any): `Schema <marshmallow.Schema>` class or instance code (int): HTTP response code Returns: function of annotation \"\"\" # noqa: DAR002 if callable ( schema ): schema = schema () def wrapper ( func : Any ) -> Any : if not hasattr ( func , \"__apispec__\" ): func . __apispec__ = { \"schemas\" : [], \"responses\" : {}, \"parameters\" : [], } func . __schemas__ = [] func . __apispec__ [ \"responses\" ][ f \" { code } \" ] = { \"schema\" : schema , \"required\" : required , \"description\" : description or \"\" , } return func return wrapper","title":"response"},{"location":"reference/viper_boot/openapi_docs/decorators/response.html#viper_boot.openapi_docs.decorators.response.response_schema","text":"Add response info into the swagger spec. Parameters: Name Type Description Default description str response description '' required bool required or not False schema Any (Any): Schema <marshmallow.Schema> class or instance required code int HTTP response code 200 Returns: Type Description Any function of annotation Source code in viper_boot\\openapi_docs\\decorators\\response.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def response_schema ( schema : Any , code : int = 200 , required : bool = False , description : str = \"\" , ) -> Any : \"\"\"Add response info into the swagger spec. Parameters: description (str): response description required (bool): required or not schema: (Any): `Schema <marshmallow.Schema>` class or instance code (int): HTTP response code Returns: function of annotation \"\"\" # noqa: DAR002 if callable ( schema ): schema = schema () def wrapper ( func : Any ) -> Any : if not hasattr ( func , \"__apispec__\" ): func . __apispec__ = { \"schemas\" : [], \"responses\" : {}, \"parameters\" : [], } func . __schemas__ = [] func . __apispec__ [ \"responses\" ][ f \" { code } \" ] = { \"schema\" : schema , \"required\" : required , \"description\" : description or \"\" , } return func return wrapper","title":"response_schema()"},{"location":"reference/viper_boot/schemas/__init__.html","text":"Schemas Package.","title":"  init  "},{"location":"reference/viper_boot/schemas/person_schema.html","text":"Person Schema. PersonSchema \u00a4 Bases: Schema Schema to represent Person object. Properties first_name (str): first name last_name (str): last name dob (date): date of birth gender (str): gender Source code in viper_boot\\schemas\\person_schema.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class PersonSchema ( Schema ): \"\"\" Schema to represent Person object. Properties: first_name (str): first name last_name (str): last name dob (date): date of birth gender (str): gender \"\"\" first_name = fields . Str ( required = True , metadata = { \"description\" : \"First name\" } ) last_name = fields . Str ( required = True , metadata = { \"description\" : \"Last name\" } ) dob = fields . Date ( required = True , dump_default = datetime . today (), metadata = { \"description\" : \"Date of birth\" , \"default\" : \"Today date\" , }, ) gender = fields . String ( required = True , metadata = { \"description\" : \"Gender\" , \"enum\" : [ \"MALE\" , \"FEMALE\" ], }, )","title":"person_schema"},{"location":"reference/viper_boot/schemas/person_schema.html#viper_boot.schemas.person_schema.PersonSchema","text":"Bases: Schema Schema to represent Person object. Properties first_name (str): first name last_name (str): last name dob (date): date of birth gender (str): gender Source code in viper_boot\\schemas\\person_schema.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class PersonSchema ( Schema ): \"\"\" Schema to represent Person object. Properties: first_name (str): first name last_name (str): last name dob (date): date of birth gender (str): gender \"\"\" first_name = fields . Str ( required = True , metadata = { \"description\" : \"First name\" } ) last_name = fields . Str ( required = True , metadata = { \"description\" : \"Last name\" } ) dob = fields . Date ( required = True , dump_default = datetime . today (), metadata = { \"description\" : \"Date of birth\" , \"default\" : \"Today date\" , }, ) gender = fields . String ( required = True , metadata = { \"description\" : \"Gender\" , \"enum\" : [ \"MALE\" , \"FEMALE\" ], }, )","title":"PersonSchema"},{"location":"reference/viper_boot/schemas/student_id_schema.html","text":"Student Id Schema. StudentIdSchema \u00a4 Bases: Schema Schema to represent Student id object. Properties id (int): student id Source code in viper_boot\\schemas\\student_id_schema.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class StudentIdSchema ( Schema ): \"\"\" Schema to represent Student id object. Properties: id (int): student id \"\"\" class Meta : \"\"\"Configure schema meta for StudentIdSchema.\"\"\" unknown = INCLUDE # pylint: disable=R0801 id = fields . UUID ( dump_only = True , metadata = { \"description\" : \"Student Id.\" }, ) Meta \u00a4 Configure schema meta for StudentIdSchema. Source code in viper_boot\\schemas\\student_id_schema.py 15 16 17 18 class Meta : \"\"\"Configure schema meta for StudentIdSchema.\"\"\" unknown = INCLUDE # pylint: disable=R0801","title":"student_id_schema"},{"location":"reference/viper_boot/schemas/student_id_schema.html#viper_boot.schemas.student_id_schema.StudentIdSchema","text":"Bases: Schema Schema to represent Student id object. Properties id (int): student id Source code in viper_boot\\schemas\\student_id_schema.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class StudentIdSchema ( Schema ): \"\"\" Schema to represent Student id object. Properties: id (int): student id \"\"\" class Meta : \"\"\"Configure schema meta for StudentIdSchema.\"\"\" unknown = INCLUDE # pylint: disable=R0801 id = fields . UUID ( dump_only = True , metadata = { \"description\" : \"Student Id.\" }, )","title":"StudentIdSchema"},{"location":"reference/viper_boot/schemas/student_id_schema.html#viper_boot.schemas.student_id_schema.StudentIdSchema.Meta","text":"Configure schema meta for StudentIdSchema. Source code in viper_boot\\schemas\\student_id_schema.py 15 16 17 18 class Meta : \"\"\"Configure schema meta for StudentIdSchema.\"\"\" unknown = INCLUDE # pylint: disable=R0801","title":"Meta"},{"location":"reference/viper_boot/schemas/student_params_schema.html","text":"Student Params Schema. StudentParamsSchema \u00a4 Bases: Schema Schema to represent Student parameters object. Properties id (int): student id Source code in viper_boot\\schemas\\student_params_schema.py 6 7 8 9 10 11 12 13 14 15 16 17 class StudentParamsSchema ( Schema ): \"\"\" Schema to represent Student parameters object. Properties: id (int): student id \"\"\" id = fields . UUID ( required = True , metadata = { \"description\" : \"Student Id.\" }, )","title":"student_params_schema"},{"location":"reference/viper_boot/schemas/student_params_schema.html#viper_boot.schemas.student_params_schema.StudentParamsSchema","text":"Bases: Schema Schema to represent Student parameters object. Properties id (int): student id Source code in viper_boot\\schemas\\student_params_schema.py 6 7 8 9 10 11 12 13 14 15 16 17 class StudentParamsSchema ( Schema ): \"\"\" Schema to represent Student parameters object. Properties: id (int): student id \"\"\" id = fields . UUID ( required = True , metadata = { \"description\" : \"Student Id.\" }, )","title":"StudentParamsSchema"},{"location":"reference/viper_boot/schemas/student_schema.html","text":"Student Schema. StudentSchema \u00a4 Bases: Schema Schema to represent Student object. Properties id (int): student id student (PersonSchema): student object Source code in viper_boot\\schemas\\student_schema.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class StudentSchema ( Schema ): \"\"\" Schema to represent Student object. Properties: id (int): student id student (PersonSchema): student object \"\"\" class Meta : \"\"\"Configure schema meta for Student Schema.\"\"\" unknown = INCLUDE # pylint: disable=R0801 id = fields . UUID ( dump_only = True , metadata = { \"description\" : \"Student Id.\" }, ) student = fields . Nested ( PersonSchema (), metadata = { \"description\" : \"Student object.\" }, ) Meta \u00a4 Configure schema meta for Student Schema. Source code in viper_boot\\schemas\\student_schema.py 18 19 20 21 class Meta : \"\"\"Configure schema meta for Student Schema.\"\"\" unknown = INCLUDE # pylint: disable=R0801","title":"student_schema"},{"location":"reference/viper_boot/schemas/student_schema.html#viper_boot.schemas.student_schema.StudentSchema","text":"Bases: Schema Schema to represent Student object. Properties id (int): student id student (PersonSchema): student object Source code in viper_boot\\schemas\\student_schema.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class StudentSchema ( Schema ): \"\"\" Schema to represent Student object. Properties: id (int): student id student (PersonSchema): student object \"\"\" class Meta : \"\"\"Configure schema meta for Student Schema.\"\"\" unknown = INCLUDE # pylint: disable=R0801 id = fields . UUID ( dump_only = True , metadata = { \"description\" : \"Student Id.\" }, ) student = fields . Nested ( PersonSchema (), metadata = { \"description\" : \"Student object.\" }, )","title":"StudentSchema"},{"location":"reference/viper_boot/schemas/student_schema.html#viper_boot.schemas.student_schema.StudentSchema.Meta","text":"Configure schema meta for Student Schema. Source code in viper_boot\\schemas\\student_schema.py 18 19 20 21 class Meta : \"\"\"Configure schema meta for Student Schema.\"\"\" unknown = INCLUDE # pylint: disable=R0801","title":"Meta"},{"location":"reference/viper_boot/services/__init__.html","text":"Services Package.","title":"  init  "},{"location":"reference/viper_boot/services/student_service.html","text":"Student Service. StudentService \u00a4 Service for student controller. Source code in viper_boot\\services\\student_service.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 class StudentService : \"\"\"Service for student controller.\"\"\" def __init__ ( self ) -> None : \"\"\"Service constructor.\"\"\" pass # pylint: disable=unnecessary-pass @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Get student by id. Parameters: _id (str) : student id Returns: (Any): student \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, } # Deserializing Object return StudentSchema () . load ( data ) @staticmethod def get_all () -> Any : \"\"\" Get all students. Returns: (Any): list of all students # type: ignore \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = [ { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, }, { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"Sarah\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1988\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . FEMALE . name , }, }, ] # Deserializing Object return StudentSchema ( many = True ) . load ( data ) @staticmethod def post ( request : Any ) -> Any : # pylint: disable=unused-argument \"\"\" Create new student. Parameters: request (Any) : student request object Returns: student id \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex } # Deserializing Object return StudentIdSchema () . load ( data ) @staticmethod def patch ( _id : str , request : Any ) -> Any : \"\"\" Update student. Parameters: _id (str): student id request (Any): student request object Returns: schema (Any): student response object \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : _id , \"student\" : request , } # Deserializing Object return StudentSchema () . load ( data ) @staticmethod def delete ( _id : str ) -> Any : \"\"\" Delete student by id. Parameters: _id (str) : student id Returns: data(Dict[str, Any]): exception if fail \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () # Return exception if fail data : Dict [ str , Any ] = {} return data __init__ () \u00a4 Service constructor. Source code in viper_boot\\services\\student_service.py 20 21 22 def __init__ ( self ) -> None : \"\"\"Service constructor.\"\"\" pass # pylint: disable=unnecessary-pass delete ( _id ) staticmethod \u00a4 Delete student by id. Parameters: Name Type Description Default _id str) student id required Returns: Name Type Description data Dict [ str , Any ] exception if fail Source code in viper_boot\\services\\student_service.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @staticmethod def delete ( _id : str ) -> Any : \"\"\" Delete student by id. Parameters: _id (str) : student id Returns: data(Dict[str, Any]): exception if fail \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () # Return exception if fail data : Dict [ str , Any ] = {} return data get ( _id = None ) staticmethod \u00a4 Get student by id. Parameters: Name Type Description Default _id str) student id None Returns: Type Description Any student Source code in viper_boot\\services\\student_service.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Get student by id. Parameters: _id (str) : student id Returns: (Any): student \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, } # Deserializing Object return StudentSchema () . load ( data ) get_all () staticmethod \u00a4 Get all students. Returns: Type Description Any list of all students # type: ignore Source code in viper_boot\\services\\student_service.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 @staticmethod def get_all () -> Any : \"\"\" Get all students. Returns: (Any): list of all students # type: ignore \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = [ { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, }, { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"Sarah\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1988\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . FEMALE . name , }, }, ] # Deserializing Object return StudentSchema ( many = True ) . load ( data ) patch ( _id , request ) staticmethod \u00a4 Update student. Parameters: Name Type Description Default _id str student id required request Any student request object required Returns: Name Type Description schema Any student response object Source code in viper_boot\\services\\student_service.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @staticmethod def patch ( _id : str , request : Any ) -> Any : \"\"\" Update student. Parameters: _id (str): student id request (Any): student request object Returns: schema (Any): student response object \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : _id , \"student\" : request , } # Deserializing Object return StudentSchema () . load ( data ) post ( request ) staticmethod \u00a4 Create new student. Parameters: Name Type Description Default request Any) student request object required Returns: Type Description Any student id Source code in viper_boot\\services\\student_service.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @staticmethod def post ( request : Any ) -> Any : # pylint: disable=unused-argument \"\"\" Create new student. Parameters: request (Any) : student request object Returns: student id \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex } # Deserializing Object return StudentIdSchema () . load ( data )","title":"student_service"},{"location":"reference/viper_boot/services/student_service.html#viper_boot.services.student_service.StudentService","text":"Service for student controller. Source code in viper_boot\\services\\student_service.pyclass StudentService : \"\"\"Service for student controller.\"\"\" def __init__ ( self ) -> None : \"\"\"Service constructor.\"\"\" pass # pylint: disable=unnecessary-pass @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Get student by id. Parameters: _id (str) : student id Returns: (Any): student \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, } # Deserializing Object return StudentSchema () . load ( data ) @staticmethod def get_all () -> Any : \"\"\" Get all students. Returns: (Any): list of all students # type: ignore \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = [ { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, }, { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"Sarah\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1988\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . FEMALE . name , }, }, ] # Deserializing Object return StudentSchema ( many = True ) . load ( data ) @staticmethod def post ( request : Any ) -> Any : # pylint: disable=unused-argument \"\"\" Create new student. Parameters: request (Any) : student request object Returns: student id \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex } # Deserializing Object return StudentIdSchema () . load ( data ) @staticmethod def patch ( _id : str , request : Any ) -> Any : \"\"\" Update student. Parameters: _id (str): student id request (Any): student request object Returns: schema (Any): student response object \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : _id , \"student\" : request , } # Deserializing Object return StudentSchema () . load ( data ) @staticmethod def delete ( _id : str ) -> Any : \"\"\" Delete student by id. Parameters: _id (str) : student id Returns: data(Dict[str, Any]): exception if fail \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () # Return exception if fail data : Dict [ str , Any ] = {} return data","title":"StudentService"},{"location":"reference/viper_boot/services/student_service.html#viper_boot.services.student_service.StudentService.__init__","text":"Service constructor. Source code in viper_boot\\services\\student_service.py 20 21 22 def __init__ ( self ) -> None : \"\"\"Service constructor.\"\"\" pass # pylint: disable=unnecessary-pass","title":"__init__()"},{"location":"reference/viper_boot/services/student_service.html#viper_boot.services.student_service.StudentService.delete","text":"Delete student by id. Parameters: Name Type Description Default _id str) student id required Returns: Name Type Description data Dict [ str , Any ] exception if fail Source code in viper_boot\\services\\student_service.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @staticmethod def delete ( _id : str ) -> Any : \"\"\" Delete student by id. Parameters: _id (str) : student id Returns: data(Dict[str, Any]): exception if fail \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () # Return exception if fail data : Dict [ str , Any ] = {} return data","title":"delete()"},{"location":"reference/viper_boot/services/student_service.html#viper_boot.services.student_service.StudentService.get","text":"Get student by id. Parameters: Name Type Description Default _id str) student id None Returns: Type Description Any student Source code in viper_boot\\services\\student_service.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 @staticmethod def get ( _id : str = None ) -> Any : \"\"\" Get student by id. Parameters: _id (str) : student id Returns: (Any): student \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, } # Deserializing Object return StudentSchema () . load ( data )","title":"get()"},{"location":"reference/viper_boot/services/student_service.html#viper_boot.services.student_service.StudentService.get_all","text":"Get all students. Returns: Type Description Any list of all students # type: ignore Source code in viper_boot\\services\\student_service.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 @staticmethod def get_all () -> Any : \"\"\" Get all students. Returns: (Any): list of all students # type: ignore \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = [ { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"James\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1978\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . MALE . name , }, }, { \"id\" : uuid . uuid4 () . hex , \"student\" : { \"first_name\" : \"Sarah\" , \"last_name\" : \"Smith\" , \"dob\" : datetime . strptime ( \"10/10/1988\" , \" %d /%m/%Y\" ) . date () . isoformat (), # noqa # pylint: disable=line-too-long \"gender\" : GenderEnum . FEMALE . name , }, }, ] # Deserializing Object return StudentSchema ( many = True ) . load ( data )","title":"get_all()"},{"location":"reference/viper_boot/services/student_service.html#viper_boot.services.student_service.StudentService.patch","text":"Update student. Parameters: Name Type Description Default _id str student id required request Any student request object required Returns: Name Type Description schema Any student response object Source code in viper_boot\\services\\student_service.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @staticmethod def patch ( _id : str , request : Any ) -> Any : \"\"\" Update student. Parameters: _id (str): student id request (Any): student request object Returns: schema (Any): student response object \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : _id , \"student\" : request , } # Deserializing Object return StudentSchema () . load ( data )","title":"patch()"},{"location":"reference/viper_boot/services/student_service.html#viper_boot.services.student_service.StudentService.post","text":"Create new student. Parameters: Name Type Description Default request Any) student request object required Returns: Type Description Any student id Source code in viper_boot\\services\\student_service.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @staticmethod def post ( request : Any ) -> Any : # pylint: disable=unused-argument \"\"\" Create new student. Parameters: request (Any) : student request object Returns: student id \"\"\" # Get API link from settings api_uri = SETTINGS [ \"API\" ][ \"url\" ] # Make API call response = requests . get ( api_uri , timeout = ( 3.05 , 27 )) response . raise_for_status () data = { \"id\" : uuid . uuid4 () . hex } # Deserializing Object return StudentIdSchema () . load ( data )","title":"post()"},{"location":"reference/viper_boot/utils/__init__.html","text":"Utilities Package.","title":"  init  "},{"location":"reference/viper_boot/utils/banner.html","text":"Project Banner. Banner \u00a4 Banner for the project. Create project banner using online tool: @see: https://fsymbols.com/generators/tarty/ Source code in viper_boot\\utils\\banner.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Banner : \"\"\" Banner for the project. Create project banner using online tool: @see: https://fsymbols.com/generators/tarty/ \"\"\" def __init__ ( self ) -> None : \"\"\"Initialise the class object.\"\"\" pass # pylint: disable=unnecessary-pass @staticmethod def paste () -> None : \"\"\"Print the banner.\"\"\" print ( console . colorize ( \"blue\" , \"\"\" \u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d \u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591 \"\"\" # noqa: E501 # pylint: disable=line-too-long ) ) __init__ () \u00a4 Initialise the class object. Source code in viper_boot\\utils\\banner.py 13 14 15 def __init__ ( self ) -> None : \"\"\"Initialise the class object.\"\"\" pass # pylint: disable=unnecessary-pass paste () staticmethod \u00a4 Print the banner. Source code in viper_boot\\utils\\banner.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @staticmethod def paste () -> None : \"\"\"Print the banner.\"\"\" print ( console . colorize ( \"blue\" , \"\"\" \u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d \u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591 \"\"\" # noqa: E501 # pylint: disable=line-too-long ) )","title":"banner"},{"location":"reference/viper_boot/utils/banner.html#viper_boot.utils.banner.Banner","text":"Banner for the project. Create project banner using online tool: @see: https://fsymbols.com/generators/tarty/ Source code in viper_boot\\utils\\banner.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Banner : \"\"\" Banner for the project. Create project banner using online tool: @see: https://fsymbols.com/generators/tarty/ \"\"\" def __init__ ( self ) -> None : \"\"\"Initialise the class object.\"\"\" pass # pylint: disable=unnecessary-pass @staticmethod def paste () -> None : \"\"\"Print the banner.\"\"\" print ( console . colorize ( \"blue\" , \"\"\" \u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d \u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591 \"\"\" # noqa: E501 # pylint: disable=line-too-long ) )","title":"Banner"},{"location":"reference/viper_boot/utils/banner.html#viper_boot.utils.banner.Banner.__init__","text":"Initialise the class object. Source code in viper_boot\\utils\\banner.py 13 14 15 def __init__ ( self ) -> None : \"\"\"Initialise the class object.\"\"\" pass # pylint: disable=unnecessary-pass","title":"__init__()"},{"location":"reference/viper_boot/utils/banner.html#viper_boot.utils.banner.Banner.paste","text":"Print the banner. Source code in viper_boot\\utils\\banner.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @staticmethod def paste () -> None : \"\"\"Print the banner.\"\"\" print ( console . colorize ( \"blue\" , \"\"\" \u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d \u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591 \"\"\" # noqa: E501 # pylint: disable=line-too-long ) )","title":"paste()"},{"location":"reference/viper_boot/utils/decorators/__init__.html","text":"Decorators Package.","title":"  init  "},{"location":"reference/viper_boot/utils/decorators/singleton_decorator.html","text":"Singleton Class Decorator. singleton ( cls ) \u00a4 Singleton Class Decorator. Parameters: Name Type Description Default cls class class object required Returns: Type Description Callable [..., Any ] Class object Source code in viper_boot\\utils\\decorators\\singleton_decorator.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def singleton ( cls : Callable [ ... , Any ]) -> Callable [ ... , Any ]: \"\"\" Singleton Class Decorator. Parameters: cls (class): class object Returns: Class object \"\"\" instances = {} @wraps ( cls ) def wrapper ( * args : Tuple [ Any , ... ], ** kwargs : Dict [ str , Any ]) -> Any : if cls not in instances : instances [ cls ] = cls ( * args , ** kwargs ) return instances [ cls ] return wrapper","title":"singleton_decorator"},{"location":"reference/viper_boot/utils/decorators/singleton_decorator.html#viper_boot.utils.decorators.singleton_decorator.singleton","text":"Singleton Class Decorator. Parameters: Name Type Description Default cls class class object required Returns: Type Description Callable [..., Any ] Class object Source code in viper_boot\\utils\\decorators\\singleton_decorator.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def singleton ( cls : Callable [ ... , Any ]) -> Callable [ ... , Any ]: \"\"\" Singleton Class Decorator. Parameters: cls (class): class object Returns: Class object \"\"\" instances = {} @wraps ( cls ) def wrapper ( * args : Tuple [ Any , ... ], ** kwargs : Dict [ str , Any ]) -> Any : if cls not in instances : instances [ cls ] = cls ( * args , ** kwargs ) return instances [ cls ] return wrapper","title":"singleton()"}]}